{"ast":null,"code":"import _asyncToGenerator from \"D:/\\u041B\\u0430\\u0431\\u043A\\u0438/VideoChat/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { HubConnectionBuilder } from \"@microsoft/signalr\";\nimport * as i0 from \"@angular/core\";\nexport class MediaService {\n  constructor() {\n    this._videoSettings = {\n      width: {\n        ideal: 1920\n      },\n      height: {\n        ideal: 1080\n      }\n    };\n    this._audioFrequency = 440;\n    this._hubConnection = new HubConnectionBuilder().withUrl(\"http://localhost:5555/conference\").build();\n  }\n  startConnection(userId, userName) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      yield _this._hubConnection.start();\n      _this._hubConnection.send(\"Connect\", {\n        id: userId,\n        name: userName\n      });\n      _this._hubConnection.on(\"Connected\", () => {\n        console.log(`Id: ${userId} Name: ${userName} - connected succesfully`);\n        _this._hubConnection.off(\"Connected\");\n      });\n    })();\n  }\n  getVideoStream() {\n    return navigator.mediaDevices.getUserMedia({\n      video: this._videoSettings\n    });\n  }\n  getAudioStream() {\n    return navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n  }\n  getVideoTrack() {\n    return navigator.mediaDevices.getUserMedia({\n      video: this._videoSettings\n    }).then(stream => stream.getVideoTracks()[0]);\n  }\n  static getVideoTrackId(stream) {\n    return stream.getVideoTracks()[0].id;\n  }\n  static getAudioTrackId(stream) {\n    return stream.getAudioTracks()[0].id;\n  }\n  getAudioTrack() {\n    const audioContext = new window.AudioContext();\n    const oscillator = audioContext.createOscillator();\n    oscillator.frequency.value = this._audioFrequency;\n    oscillator.connect(audioContext.destination);\n    return audioContext.createMediaStreamDestination().stream.getAudioTracks()[0];\n  }\n  sendMediaStreamData(userId, data) {\n    this._hubConnection.send(\"SendMedia\", userId, data);\n  }\n  listenMediaData(handler) {\n    //this._ws.onmessage = handler;\n  }\n  static #_ = this.ɵfac = function MediaService_Factory(t) {\n    return new (t || MediaService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MediaService,\n    factory: MediaService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"mappings":";AACA,SAAwBA,oBAAoB,QAAQ,oBAAoB;;AAGxE,OAAM,MAAOC,YAAY;EAQrBC;IAPiB,mBAAc,GAAG;MAC9BC,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAI,CAAE;MACtBC,MAAM,EAAE;QAAED,KAAK,EAAE;MAAI;KACxB;IACgB,oBAAe,GAAG,GAAG;IAIlC,IAAI,CAACE,cAAc,GAAG,IAAIN,oBAAoB,EAAE,CAC3CO,OAAO,CAAC,kCAAkC,CAAC,CAACC,KAAK,EAAE;EAC5D;EAEaC,eAAe,CAACC,MAAc,EAAEC,QAAgB;IAAA;IAAA;MACzD,MAAM,KAAI,CAACL,cAAc,CAACM,KAAK,EAAE;MACjC,KAAI,CAACN,cAAc,CAACO,IAAI,CAAC,SAAS,EAAE;QAAEC,EAAE,EAAEJ,MAAM;QAAEK,IAAI,EAAEJ;MAAQ,CAAE,CAAC;MACnE,KAAI,CAACL,cAAc,CAACU,EAAE,CAAC,WAAW,EAAE,MAAK;QACrCC,OAAO,CAACC,GAAG,CAAC,OAAOR,MAAM,UAAUC,QAAQ,0BAA0B,CAAC;QACtE,KAAI,CAACL,cAAc,CAACa,GAAG,CAAC,WAAW,CAAC;MACxC,CAAC,CAAC;IAAC;EACP;EAEOC,cAAc;IACjB,OAAOC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MACvCC,KAAK,EAAE,IAAI,CAACC;KACf,CAAC;EACN;EAEOC,cAAc;IACjB,OAAOL,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MACvCI,KAAK,EAAE;KACV,CAAC;EACN;EAEOC,aAAa;IAChB,OAAOP,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MACvCC,KAAK,EAAE,IAAI,CAACC;KACf,CAAC,CAACI,IAAI,CAAEC,MAAmB,IAAKA,MAAM,CAACC,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC;EAChE;EAEO,OAAOC,eAAe,CAACF,MAAmB;IAC7C,OAAOA,MAAM,CAACC,cAAc,EAAE,CAAC,CAAC,CAAC,CAACjB,EAAE;EACxC;EAEO,OAAOmB,eAAe,CAACH,MAAmB;IAC7C,OAAOA,MAAM,CAACI,cAAc,EAAE,CAAC,CAAC,CAAC,CAACpB,EAAE;EACxC;EAEOqB,aAAa;IAChB,MAAMC,YAAY,GAAG,IAAIC,MAAM,CAACC,YAAY,EAAE;IAE9C,MAAMC,UAAU,GAAGH,YAAY,CAACI,gBAAgB,EAAE;IAClDD,UAAU,CAACE,SAAS,CAACC,KAAK,GAAG,IAAI,CAACC,eAAe;IACjDJ,UAAU,CAACK,OAAO,CAACR,YAAY,CAACS,WAAW,CAAC;IAE5C,OAAOT,YAAY,CAACU,4BAA4B,EAAE,CAAChB,MAAM,CAACI,cAAc,EAAE,CAAC,CAAC,CAAC;EACjF;EAEOa,mBAAmB,CAACrC,MAAc,EAAEsC,IAAU;IACjD,IAAI,CAAC1C,cAAc,CAACO,IAAI,CAAC,WAAW,EAAEH,MAAM,EAAEsC,IAAI,CAAC;EACvD;EAEOC,eAAe,CAACC,OAA6C;IAChE;EAAA;EACH;qBAhEQjD,YAAY;EAAA;EAAA;WAAZA,YAAY;IAAAkD,SAAZlD,YAAY;IAAAmD,YADC;EAAM","names":["HubConnectionBuilder","MediaService","constructor","width","ideal","height","_hubConnection","withUrl","build","startConnection","userId","userName","start","send","id","name","on","console","log","off","getVideoStream","navigator","mediaDevices","getUserMedia","video","_videoSettings","getAudioStream","audio","getVideoTrack","then","stream","getVideoTracks","getVideoTrackId","getAudioTrackId","getAudioTracks","getAudioTrack","audioContext","window","AudioContext","oscillator","createOscillator","frequency","value","_audioFrequency","connect","destination","createMediaStreamDestination","sendMediaStreamData","data","listenMediaData","handler","factory","providedIn"],"sourceRoot":"","sources":["D:\\Лабки\\VideoChat\\client\\src\\service\\media.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { HubConnection, HubConnectionBuilder } from \"@microsoft/signalr\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class MediaService {\r\n    private readonly _videoSettings = {\r\n        width: { ideal: 1920 },\r\n        height: { ideal: 1080 }\r\n    };\r\n    private readonly _audioFrequency = 440;\r\n    private _hubConnection: HubConnection;\r\n\r\n    constructor() {\r\n        this._hubConnection = new HubConnectionBuilder()\r\n            .withUrl(\"http://localhost:5555/conference\").build();\r\n    }\r\n\r\n    public async startConnection(userId: string, userName: string) {\r\n        await this._hubConnection.start();\r\n        this._hubConnection.send(\"Connect\", { id: userId, name: userName });\r\n        this._hubConnection.on(\"Connected\", () => {\r\n            console.log(`Id: ${userId} Name: ${userName} - connected succesfully`);\r\n            this._hubConnection.off(\"Connected\");\r\n        });\r\n    }\r\n\r\n    public getVideoStream() : Promise<MediaStream> {\r\n        return navigator.mediaDevices.getUserMedia({\r\n            video: this._videoSettings\r\n        });\r\n    }\r\n\r\n    public getAudioStream() : Promise<MediaStream> {\r\n        return navigator.mediaDevices.getUserMedia({\r\n            audio: true\r\n        });\r\n    }\r\n\r\n    public getVideoTrack() : Promise<MediaStreamTrack> {\r\n        return navigator.mediaDevices.getUserMedia({\r\n            video: this._videoSettings\r\n        }).then((stream: MediaStream) => stream.getVideoTracks()[0]);\r\n    }\r\n\r\n    public static getVideoTrackId(stream: MediaStream): string {\r\n        return stream.getVideoTracks()[0].id;\r\n    }\r\n\r\n    public static getAudioTrackId(stream: MediaStream): string {\r\n        return stream.getAudioTracks()[0].id;\r\n    }\r\n\r\n    public getAudioTrack() : MediaStreamTrack {\r\n        const audioContext = new window.AudioContext();\r\n\r\n        const oscillator = audioContext.createOscillator();\r\n        oscillator.frequency.value = this._audioFrequency;\r\n        oscillator.connect(audioContext.destination);\r\n\r\n        return audioContext.createMediaStreamDestination().stream.getAudioTracks()[0];\r\n    }\r\n\r\n    public sendMediaStreamData(userId: string, data: Blob) {\r\n        this._hubConnection.send(\"SendMedia\", userId, data);\r\n    }\r\n\r\n    public listenMediaData(handler: (message: MessageEvent<any>) => void): void{\r\n        //this._ws.onmessage = handler;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}