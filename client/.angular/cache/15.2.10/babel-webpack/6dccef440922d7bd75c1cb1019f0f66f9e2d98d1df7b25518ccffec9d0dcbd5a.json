{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input, ViewChild } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nlet ParticipantComponent = class ParticipantComponent {\n  _toggleVideo(isActive) {\n    this.isVideoActive = isActive;\n    this._signal.sendToggleEvent(\"ToggleVideo\", isActive);\n  }\n  _toggleMicrophone(isActive) {\n    this.isMicroActive = isActive;\n    this._signal.sendToggleEvent(\"ToggleMicrophone\", isActive);\n  }\n  constructor(_signal) {\n    this._signal = _signal;\n    this._subscriptions = new Subscription();\n    this.onStartVideo = new Subject();\n    this._onStartVideo$ = this.onStartVideo.asObservable();\n    this.onStopVideo = new Subject();\n    this._onStopVideo$ = this.onStopVideo.asObservable();\n    this.isMicroActive = false;\n    this.isVideoActive = false;\n    this._subscriptions.add(this._onStartVideo$.subscribe(stream => {\n      this.participant.stream.addTrack(stream.getVideoTracks()[0]);\n      this._toggleVideo(true);\n    }));\n    this._subscriptions.add(this._onStopVideo$.subscribe(() => {\n      this.participant.stream.getVideoTracks()[0].enabled = false;\n      this._toggleVideo(false);\n    }));\n    this._subscriptions.add(this._signal.onToggleVideo$.subscribe(event => {\n      if (this.participant.id === event.userId) {\n        return;\n      }\n      this.isVideoActive = event.isActive;\n    }));\n    this._subscriptions.add(this._signal.onToggleMicrophone$.subscribe(event => {\n      if (this.participant.id === event.userId) {\n        return;\n      }\n      this.isMicroActive = event.isActive;\n    }));\n  }\n  ngOnDestroy() {\n    this._subscriptions.unsubscribe();\n  }\n};\n__decorate([ViewChild(\"video\")], ParticipantComponent.prototype, \"videoEl\", void 0);\n__decorate([Input()], ParticipantComponent.prototype, \"participant\", void 0);\nParticipantComponent = __decorate([Component({\n  selector: 'app-participant',\n  templateUrl: './participant.component.html',\n  styleUrls: ['./participant.component.scss']\n})], ParticipantComponent);\nexport { ParticipantComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAcC,KAAK,EAAEC,SAAS,QAAmB,eAAe;AAClF,SAASC,OAAO,EAAEC,YAAY,QAAQ,MAAM;AASrC,IAAMC,oBAAoB,GAA1B,MAAMA,oBAAoB;EAevBC,YAAY,CAACC,QAAiB;IACpC,IAAI,CAACC,aAAa,GAAGD,QAAQ;IAC7B,IAAI,CAACE,OAAO,CAACC,eAAe,CAAC,aAAa,EAAEH,QAAQ,CAAC;EACvD;EAEQI,iBAAiB,CAACJ,QAAiB;IACzC,IAAI,CAACK,aAAa,GAAGL,QAAQ;IAC7B,IAAI,CAACE,OAAO,CAACC,eAAe,CAAC,kBAAkB,EAAEH,QAAQ,CAAC;EAC5D;EAEAM,YAA6BJ,OAAuB;IAAvB,YAAO,GAAPA,OAAO;IArB5B,mBAAc,GAAG,IAAIL,YAAY,EAAE;IAEpC,iBAAY,GAAG,IAAID,OAAO,EAAe;IACxC,mBAAc,GAAG,IAAI,CAACW,YAAY,CAACC,YAAY,EAAE;IAElD,gBAAW,GAAG,IAAIZ,OAAO,EAAQ;IAChC,kBAAa,GAAG,IAAI,CAACa,WAAW,CAACD,YAAY,EAAE;IAEhD,kBAAa,GAAG,KAAK;IACrB,kBAAa,GAAG,KAAK;IAa1B,IAAI,CAACE,cAAc,CAACC,GAAG,CAAC,IAAI,CAACC,cAAc,CAACC,SAAS,CAAEC,MAAmB,IAAI;MAC5E,IAAI,CAACC,WAAW,CAACD,MAAM,CAACE,QAAQ,CAACF,MAAM,CAACG,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC;MAC5D,IAAI,CAAClB,YAAY,CAAC,IAAI,CAAC;IACzB,CAAC,CAAC,CAAC;IACH,IAAI,CAACW,cAAc,CAACC,GAAG,CAAC,IAAI,CAACO,aAAa,CAACL,SAAS,CAAC,MAAK;MACxD,IAAI,CAACE,WAAW,CAACD,MAAM,CAACG,cAAc,EAAE,CAAC,CAAC,CAAC,CAACE,OAAO,GAAG,KAAK;MAC3D,IAAI,CAACpB,YAAY,CAAC,KAAK,CAAC;IAC1B,CAAC,CAAC,CAAC;IACH,IAAI,CAACW,cAAc,CAACC,GAAG,CAAC,IAAI,CAACT,OAAO,CAACkB,cAAc,CAACP,SAAS,CAAEQ,KAAK,IAAI;MACtE,IAAI,IAAI,CAACN,WAAW,CAACO,EAAE,KAAKD,KAAK,CAACE,MAAM,EAAE;QACxC;;MAEF,IAAI,CAACtB,aAAa,GAAGoB,KAAK,CAACrB,QAAQ;IACrC,CAAC,CAAC,CAAC;IACH,IAAI,CAACU,cAAc,CAACC,GAAG,CAAC,IAAI,CAACT,OAAO,CAACsB,mBAAmB,CAACX,SAAS,CAAEQ,KAAK,IAAI;MAC3E,IAAI,IAAI,CAACN,WAAW,CAACO,EAAE,KAAKD,KAAK,CAACE,MAAM,EAAE;QACxC;;MAEF,IAAI,CAAClB,aAAa,GAAGgB,KAAK,CAACrB,QAAQ;IACrC,CAAC,CAAC,CAAC;EACL;EAEOyB,WAAW;IAChB,IAAI,CAACf,cAAc,CAACgB,WAAW,EAAE;EACnC;CACD;AAlDqBC,YAAnBhC,SAAS,CAAC,OAAO,CAAC,qDAA8B;AACxCgC,YAARjC,KAAK,EAAE,yDAAqC;AAFlCI,oBAAoB,eALhCL,SAAS,CAAC;EACTmC,QAAQ,EAAE,iBAAiB;EAC3BC,WAAW,EAAE,8BAA8B;EAC3CC,SAAS,EAAE,CAAC,8BAA8B;CAC3C,CAAC,GACWhC,oBAAoB,CAmDhC;SAnDYA,oBAAoB","names":["Component","Input","ViewChild","Subject","Subscription","ParticipantComponent","_toggleVideo","isActive","isVideoActive","_signal","sendToggleEvent","_toggleMicrophone","isMicroActive","constructor","onStartVideo","asObservable","onStopVideo","_subscriptions","add","_onStartVideo$","subscribe","stream","participant","addTrack","getVideoTracks","_onStopVideo$","enabled","onToggleVideo$","event","id","userId","onToggleMicrophone$","ngOnDestroy","unsubscribe","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\Лабки\\VideoChat\\client\\src\\app\\participant\\participant.component.ts"],"sourcesContent":["import { Component, ElementRef, Input, ViewChild, OnDestroy } from '@angular/core';\nimport { Subject, Subscription } from 'rxjs';\nimport { RtcParticipant } from 'src/model/rtc-participant';\nimport { SignalRService } from 'src/service/signalr.service';\n\n@Component({\n  selector: 'app-participant',\n  templateUrl: './participant.component.html',\n  styleUrls: ['./participant.component.scss']\n})\nexport class ParticipantComponent implements OnDestroy {\n  @ViewChild(\"video\") public videoEl! : ElementRef;\n  @Input() public participant!: RtcParticipant;\n\n  private _subscriptions = new Subscription();\n\n  public onStartVideo = new Subject<MediaStream>();\n  private _onStartVideo$ = this.onStartVideo.asObservable();\n\n  public onStopVideo = new Subject<void>();\n  private _onStopVideo$ = this.onStopVideo.asObservable();\n\n  public isMicroActive = false;\n  public isVideoActive = false;\n\n  private _toggleVideo(isActive: boolean) {\n    this.isVideoActive = isActive;\n    this._signal.sendToggleEvent(\"ToggleVideo\", isActive);\n  }\n\n  private _toggleMicrophone(isActive: boolean) {\n    this.isMicroActive = isActive;\n    this._signal.sendToggleEvent(\"ToggleMicrophone\", isActive);\n  }\n\n  constructor(private readonly _signal: SignalRService) {\n    this._subscriptions.add(this._onStartVideo$.subscribe((stream: MediaStream) => {\n      this.participant.stream.addTrack(stream.getVideoTracks()[0]);\n      this._toggleVideo(true);\n    }));\n    this._subscriptions.add(this._onStopVideo$.subscribe(() => {\n      this.participant.stream.getVideoTracks()[0].enabled = false;\n      this._toggleVideo(false);\n    }));\n    this._subscriptions.add(this._signal.onToggleVideo$.subscribe((event) => {\n      if (this.participant.id === event.userId) {\n        return;\n      }\n      this.isVideoActive = event.isActive;\n    }));\n    this._subscriptions.add(this._signal.onToggleMicrophone$.subscribe((event) => {\n      if (this.participant.id === event.userId) {\n        return;\n      }\n      this.isMicroActive = event.isActive;\n    }));\n  }\n\n  public ngOnDestroy(): void {\n    this._subscriptions.unsubscribe();\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}