{"ast":null,"code":"import _asyncToGenerator from \"D:/\\u041B\\u0430\\u0431\\u043A\\u0438/VideoChat/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport class RtcService {\n  constructor() {\n    this._peerConnectionConfig = {\n      iceServers: [{\n        urls: \"stun:stun.services.mozilla.com\"\n      }, {\n        urls: \"stun:stun.l.google.com:19302\"\n      }, {\n        urls: \"stun:stun.awt.be:3478\"\n      }, {\n        urls: \"stun:stun.b2b2c.ca:3478\"\n      }, {\n        urls: \"stun:stun.bahnhof.net:3478\"\n      }, {\n        urls: \"stun:stun.barracuda.com:3478\"\n      }, {\n        urls: \"stun:stun.bluesip.net:3478\"\n      }, {\n        urls: \"stun:stun.bmwgs.cz:3478\"\n      }, {\n        urls: \"stun:stun.botonakis.com:3478\"\n      }, {\n        urls: \"stun:stun.budgetphone.nl:3478\"\n      }, {\n        urls: \"stun:stun.cablenet-as.net:3478\"\n      }]\n    };\n    this._onIceCandidate = new Subject();\n    this.onIceCandidate$ = this._onIceCandidate.asObservable();\n  }\n  createPeer(stream, outputStream) {\n    let peer = new RTCPeerConnection(this._peerConnectionConfig);\n    peer.onicecandidate = event => {\n      if (event.candidate != null) {\n        console.log('SENDING ICE');\n        this._onIceCandidate.next(event);\n      }\n    };\n    stream.getTracks().forEach(track => {\n      peer.addTrack(track, stream);\n    });\n    peer.ontrack = event => {\n      event.streams[0].getTracks().forEach(track => {\n        outputStream.addTrack(track);\n      });\n    };\n    return peer;\n  }\n  getMediaStream() {\n    return _asyncToGenerator(function* () {\n      return navigator.mediaDevices.getUserMedia({\n        video: {\n          width: {\n            ideal: 300\n          },\n          height: {\n            ideal: 300\n          }\n        },\n        audio: false\n      });\n    })();\n  }\n  static #_ = this.ɵfac = function RtcService_Factory(t) {\n    return new (t || RtcService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RtcService,\n    factory: RtcService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"mappings":";AACA,SAASA,OAAO,QAAQ,MAAM;;AAG9B,OAAM,MAAOC,UAAU;EADvBC;IAEmB,0BAAqB,GAAI;MACxCC,UAAU,EAAE,CACV;QAAEC,IAAI,EAAE;MAAgC,CAAE,EAC1C;QAAEA,IAAI,EAAE;MAA8B,CAAE,EACxC;QAAEA,IAAI,EAAE;MAAuB,CAAE,EACjC;QAAEA,IAAI,EAAE;MAAyB,CAAE,EACnC;QAAEA,IAAI,EAAE;MAA4B,CAAE,EACtC;QAAEA,IAAI,EAAE;MAA8B,CAAE,EACxC;QAAEA,IAAI,EAAE;MAA4B,CAAE,EACtC;QAAEA,IAAI,EAAE;MAAyB,CAAE,EACnC;QAAEA,IAAI,EAAE;MAA8B,CAAE,EACxC;QAAEA,IAAI,EAAE;MAA+B,CAAE,EACzC;QAAEA,IAAI,EAAE;MAAgC,CAAE;KAE7C;IAEO,oBAAe,GAAG,IAAIJ,OAAO,EAA6B;IAC3D,oBAAe,GAAG,IAAI,CAACK,eAAe,CAACC,YAAY,EAAE;;EAErDC,UAAU,CAACC,MAAmB,EAAEC,YAAyB;IAC9D,IAAIC,IAAI,GAAG,IAAIC,iBAAiB,CAAC,IAAI,CAACC,qBAAqB,CAAC;IAE5DF,IAAI,CAACG,cAAc,GAAIC,KAAK,IAAI;MAC9B,IAAGA,KAAK,CAACC,SAAS,IAAI,IAAI,EAAE;QAC1BC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;QAC1B,IAAI,CAACZ,eAAe,CAACa,IAAI,CAACJ,KAAK,CAAC;;IAEpC,CAAC;IAEDN,MAAM,CAACW,SAAS,EAAE,CAACC,OAAO,CAAEC,KAAK,IAAI;MACnCX,IAAI,CAACY,QAAQ,CAACD,KAAK,EAAEb,MAAM,CAAC;IAC9B,CAAC,CAAC;IAEFE,IAAI,CAACa,OAAO,GAAIT,KAAK,IAAI;MACvBA,KAAK,CAACU,OAAO,CAAC,CAAC,CAAC,CAACL,SAAS,EAAE,CAACC,OAAO,CAAEC,KAAK,IAAI;QAC7CZ,YAAY,CAACa,QAAQ,CAACD,KAAK,CAAC;MAC9B,CAAC,CAAC;IACJ,CAAC;IACD,OAAOX,IAAI;EACb;EAEae,cAAc;IAAA;MACzB,OAAOC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QACzCC,KAAK,EAAE;UACLC,KAAK,EAAE;YAAEC,KAAK,EAAE;UAAG,CAAE;UACrBC,MAAM,EAAE;YAAED,KAAK,EAAE;UAAG;SACrB;QACDE,KAAK,EAAE;OACR,CAAC;IAAC;EACL;EAAC;qBAlDUhC,UAAU;EAAA;EAAA;WAAVA,UAAU;IAAAiC,SAAVjC,UAAU;IAAAkC,YADG;EAAM","names":["Subject","RtcService","constructor","iceServers","urls","_onIceCandidate","asObservable","createPeer","stream","outputStream","peer","RTCPeerConnection","_peerConnectionConfig","onicecandidate","event","candidate","console","log","next","getTracks","forEach","track","addTrack","ontrack","streams","getMediaStream","navigator","mediaDevices","getUserMedia","video","width","ideal","height","audio","factory","providedIn"],"sourceRoot":"","sources":["D:\\Лабки\\VideoChat\\client\\src\\service\\rtc.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Subject } from \"rxjs\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class RtcService {\r\n  private readonly _peerConnectionConfig =  {\r\n    iceServers: [\r\n      { urls: \"stun:stun.services.mozilla.com\" },\r\n      { urls: \"stun:stun.l.google.com:19302\" },\r\n      { urls: \"stun:stun.awt.be:3478\" },\r\n      { urls: \"stun:stun.b2b2c.ca:3478\" },\r\n      { urls: \"stun:stun.bahnhof.net:3478\" },\r\n      { urls: \"stun:stun.barracuda.com:3478\" },\r\n      { urls: \"stun:stun.bluesip.net:3478\" },\r\n      { urls: \"stun:stun.bmwgs.cz:3478\" },\r\n      { urls: \"stun:stun.botonakis.com:3478\" },\r\n      { urls: \"stun:stun.budgetphone.nl:3478\" },\r\n      { urls: \"stun:stun.cablenet-as.net:3478\" }\r\n    ]\r\n  };\r\n\r\n  private _onIceCandidate = new Subject<RTCPeerConnectionIceEvent>();\r\n  public onIceCandidate$ = this._onIceCandidate.asObservable();\r\n\r\n  public createPeer(stream: MediaStream, outputStream: MediaStream): RTCPeerConnection {\r\n    let peer = new RTCPeerConnection(this._peerConnectionConfig);\r\n   \r\n    peer.onicecandidate = (event) => {\r\n      if(event.candidate != null) {\r\n        console.log('SENDING ICE');\r\n        this._onIceCandidate.next(event);\r\n      }\r\n    }\r\n\r\n    stream.getTracks().forEach((track) => {\r\n      peer.addTrack(track, stream);\r\n    });\r\n\r\n    peer.ontrack = (event) => {\r\n      event.streams[0].getTracks().forEach((track) => {\r\n        outputStream.addTrack(track);\r\n      });\r\n    };\r\n    return peer;\r\n  }\r\n\r\n  public async getMediaStream(): Promise<MediaStream> {\r\n    return navigator.mediaDevices.getUserMedia({\r\n      video: {\r\n        width: { ideal: 300 },\r\n        height: { ideal: 300 }\r\n      },\r\n      audio: false\r\n    });\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}