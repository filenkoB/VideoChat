{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class MediaService {\n  constructor() {\n    this._videoSettings = {\n      width: {\n        ideal: 1920\n      },\n      height: {\n        ideal: 1080\n      }\n    };\n  }\n  getMediaStream() {\n    return navigator.mediaDevices.getUserMedia({\n      video: this._videoSettings\n    }).then(stream => {\n      (stream.getAudioTracks()[0] || {}).enabled = false;\n      (stream.getVideoTracks()[0] || {}).enabled = false;\n      return stream;\n    });\n  }\n  static #_ = this.ɵfac = function MediaService_Factory(t) {\n    return new (t || MediaService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MediaService,\n    factory: MediaService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"mappings":";AAGA,OAAM,MAAOA,YAAY;EADzBC;IAEqB,mBAAc,GAAG;MAC9BC,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAI,CAAE;MACtBC,MAAM,EAAE;QAAED,KAAK,EAAE;MAAI;KACxB;;EAEME,cAAc;IACjB,OAAOC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MACvCC,KAAK,EAAE,IAAI,CAACC;KACf,CAAC,CAACC,IAAI,CAAEC,MAAmB,IAAI;MAC5B,CAACA,MAAM,CAACC,cAAc,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,EAAEC,OAAO,GAAG,KAAK;MAClD,CAACF,MAAM,CAACG,cAAc,EAAE,CAAC,CAAC,CAAC,IAAI,EAAE,EAAED,OAAO,GAAG,KAAK;MAClD,OAAOF,MAAM;IACjB,CAAC,CAAC;EACN;EAAC;qBAdQZ,YAAY;EAAA;EAAA;WAAZA,YAAY;IAAAgB,SAAZhB,YAAY;IAAAiB,YADC;EAAM","names":["MediaService","constructor","width","ideal","height","getMediaStream","navigator","mediaDevices","getUserMedia","video","_videoSettings","then","stream","getAudioTracks","enabled","getVideoTracks","factory","providedIn"],"sourceRoot":"","sources":["D:\\Лабки\\VideoChat\\client\\src\\service\\media.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class MediaService {\r\n    private readonly _videoSettings = {\r\n        width: { ideal: 1920 },\r\n        height: { ideal: 1080 }\r\n    };\r\n\r\n    public getMediaStream() : Promise<MediaStream> {\r\n        return navigator.mediaDevices.getUserMedia({\r\n            video: this._videoSettings\r\n        }).then((stream: MediaStream) => {\r\n            (stream.getAudioTracks()[0] || {}).enabled = false;\r\n            (stream.getVideoTracks()[0] || {}).enabled = false;\r\n            return stream;\r\n        })\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}