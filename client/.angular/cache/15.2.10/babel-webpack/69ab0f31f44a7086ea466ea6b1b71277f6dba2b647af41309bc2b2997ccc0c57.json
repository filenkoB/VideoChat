{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class MediaService {\n  constructor() {\n    this._videoSettings = {\n      width: {\n        ideal: 1920\n      },\n      height: {\n        ideal: 1080\n      }\n    };\n    this._audioFrequency = 440;\n    this._ws = new WebSocket(\"ws://localhost:5124\");\n  }\n  getVideoStream() {\n    return navigator.mediaDevices.getUserMedia({\n      video: this._videoSettings\n    });\n  }\n  getAudioStream() {\n    return navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n  }\n  getVideoTrack() {\n    return navigator.mediaDevices.getUserMedia({\n      video: this._videoSettings\n    }).then(stream => stream.getVideoTracks()[0]);\n  }\n  static getVideoTrackId(stream) {\n    return stream.getVideoTracks()[0].id;\n  }\n  static getAudioTrackId(stream) {\n    return stream.getAudioTracks()[0].id;\n  }\n  getAudioTrack() {\n    const audioContext = new window.AudioContext();\n    const oscillator = audioContext.createOscillator();\n    oscillator.frequency.value = this._audioFrequency;\n    oscillator.connect(audioContext.destination);\n    return audioContext.createMediaStreamDestination().stream.getAudioTracks()[0];\n  }\n  sendMediaStreamData(data) {\n    if (this._ws.OPEN) {\n      this._ws.send(data);\n    }\n  }\n  static #_ = this.ɵfac = function MediaService_Factory(t) {\n    return new (t || MediaService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MediaService,\n    factory: MediaService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"mappings":";AAGA,OAAM,MAAOA,YAAY;EAQrBC;IAPiB,mBAAc,GAAG;MAC9BC,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAI,CAAE;MACtBC,MAAM,EAAE;QAAED,KAAK,EAAE;MAAI;KACxB;IACgB,oBAAe,GAAG,GAAG;IAIlC,IAAI,CAACE,GAAG,GAAG,IAAIC,SAAS,CAAC,qBAAqB,CAAC;EACnD;EAEOC,cAAc;IACjB,OAAOC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MACvCC,KAAK,EAAE,IAAI,CAACC;KACf,CAAC;EACN;EAEOC,cAAc;IACjB,OAAOL,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MACvCI,KAAK,EAAE;KACV,CAAC;EACN;EAEOC,aAAa;IAChB,OAAOP,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MACvCC,KAAK,EAAE,IAAI,CAACC;KACf,CAAC,CAACI,IAAI,CAAEC,MAAmB,IAAKA,MAAM,CAACC,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC;EAChE;EAEO,OAAOC,eAAe,CAACF,MAAmB;IAC7C,OAAOA,MAAM,CAACC,cAAc,EAAE,CAAC,CAAC,CAAC,CAACE,EAAE;EACxC;EAEO,OAAOC,eAAe,CAACJ,MAAmB;IAC7C,OAAOA,MAAM,CAACK,cAAc,EAAE,CAAC,CAAC,CAAC,CAACF,EAAE;EACxC;EAEOG,aAAa;IAChB,MAAMC,YAAY,GAAG,IAAIC,MAAM,CAACC,YAAY,EAAE;IAE9C,MAAMC,UAAU,GAAGH,YAAY,CAACI,gBAAgB,EAAE;IAClDD,UAAU,CAACE,SAAS,CAACC,KAAK,GAAG,IAAI,CAACC,eAAe;IACjDJ,UAAU,CAACK,OAAO,CAACR,YAAY,CAACS,WAAW,CAAC;IAE5C,OAAOT,YAAY,CAACU,4BAA4B,EAAE,CAACjB,MAAM,CAACK,cAAc,EAAE,CAAC,CAAC,CAAC;EACjF;EAEOa,mBAAmB,CAACC,IAAU;IACjC,IAAI,IAAI,CAAC/B,GAAG,CAACgC,IAAI,EAAE;MACf,IAAI,CAAChC,GAAG,CAACiC,IAAI,CAACF,IAAI,CAAC;;EAE3B;EAAC;qBApDQpC,YAAY;EAAA;EAAA;WAAZA,YAAY;IAAAuC,SAAZvC,YAAY;IAAAwC,YADC;EAAM","names":["MediaService","constructor","width","ideal","height","_ws","WebSocket","getVideoStream","navigator","mediaDevices","getUserMedia","video","_videoSettings","getAudioStream","audio","getVideoTrack","then","stream","getVideoTracks","getVideoTrackId","id","getAudioTrackId","getAudioTracks","getAudioTrack","audioContext","window","AudioContext","oscillator","createOscillator","frequency","value","_audioFrequency","connect","destination","createMediaStreamDestination","sendMediaStreamData","data","OPEN","send","factory","providedIn"],"sourceRoot":"","sources":["D:\\Лабки\\VideoChat\\client\\src\\service\\media.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class MediaService {\r\n    private readonly _videoSettings = {\r\n        width: { ideal: 1920 },\r\n        height: { ideal: 1080 }\r\n    };\r\n    private readonly _audioFrequency = 440;\r\n    private readonly _ws: WebSocket;\r\n\r\n    constructor() {\r\n        this._ws = new WebSocket(\"ws://localhost:5124\");\r\n    }\r\n\r\n    public getVideoStream() : Promise<MediaStream> {\r\n        return navigator.mediaDevices.getUserMedia({\r\n            video: this._videoSettings\r\n        });\r\n    }\r\n\r\n    public getAudioStream() : Promise<MediaStream> {\r\n        return navigator.mediaDevices.getUserMedia({\r\n            audio: true\r\n        });\r\n    }\r\n\r\n    public getVideoTrack() : Promise<MediaStreamTrack> {\r\n        return navigator.mediaDevices.getUserMedia({\r\n            video: this._videoSettings\r\n        }).then((stream: MediaStream) => stream.getVideoTracks()[0]);\r\n    }\r\n\r\n    public static getVideoTrackId(stream: MediaStream): string {\r\n        return stream.getVideoTracks()[0].id;\r\n    }\r\n\r\n    public static getAudioTrackId(stream: MediaStream): string {\r\n        return stream.getAudioTracks()[0].id;\r\n    }\r\n\r\n    public getAudioTrack() : MediaStreamTrack {\r\n        const audioContext = new window.AudioContext();\r\n\r\n        const oscillator = audioContext.createOscillator();\r\n        oscillator.frequency.value = this._audioFrequency;\r\n        oscillator.connect(audioContext.destination);\r\n\r\n        return audioContext.createMediaStreamDestination().stream.getAudioTracks()[0];\r\n    }\r\n\r\n    public sendMediaStreamData(data: Blob) {\r\n        if (this._ws.OPEN) {\r\n            this._ws.send(data);\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}