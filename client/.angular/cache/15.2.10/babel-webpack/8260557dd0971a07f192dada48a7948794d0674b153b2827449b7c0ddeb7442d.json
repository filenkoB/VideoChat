{"ast":null,"code":"import _asyncToGenerator from \"D:/\\u041B\\u0430\\u0431\\u043A\\u0438/VideoChat/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Subject } from \"rxjs\";\nimport { HubConnectionBuilder } from \"@microsoft/signalr\";\nimport constants from \"src/constants\";\nimport * as i0 from \"@angular/core\";\nexport class ConferenceService {\n  constructor() {\n    this._getParticipants = new Subject();\n    this.getParticipants$ = this._getParticipants.asObservable();\n    this._onToggleMicrophone = new Subject();\n    this.onToggleMicrophone$ = this._onToggleMicrophone.asObservable();\n    this._onConnected = new Subject();\n    this.onConnected$ = this._onConnected.asObservable();\n    this._onNewConnection = new Subject();\n    this.onNewConnection$ = this._onNewConnection.asObservable();\n    this._onRemoveConnection = new Subject();\n    this.onRemoveConnection$ = this._onRemoveConnection.asObservable();\n  }\n  _initListeners() {\n    if (!this._connection) {\n      return;\n    }\n    this._connection.on(\"OnConnected\", () => this._onConnected.next());\n  }\n  startConnection(userId, userName) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this._connection = new HubConnectionBuilder().withUrl(constants.serverUrl + \"/conference\").build();\n      yield _this._connection.start();\n      _this._connection.send(\"Connect\", {\n        id: userId,\n        name: userName\n      });\n    })();\n  }\n  static #_ = this.ɵfac = function ConferenceService_Factory(t) {\n    return new (t || ConferenceService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConferenceService,\n    factory: ConferenceService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"mappings":";AAEA,SAASA,OAAO,QAAQ,MAAM;AAC9B,SAAwBC,oBAAoB,QAAQ,oBAAoB;AACxE,OAAOC,SAAS,MAAM,eAAe;;AAIrC,OAAM,MAAOC,iBAAiB;EAD9BC;IAIY,qBAAgB,GAAG,IAAIJ,OAAO,EAAiB;IAChD,qBAAgB,GAAG,IAAI,CAACK,gBAAgB,CAACC,YAAY,EAAE;IAEtD,wBAAmB,GAAG,IAAIN,OAAO,EAAoB;IACtD,wBAAmB,GAAG,IAAI,CAACO,mBAAmB,CAACD,YAAY,EAAE;IAE5D,iBAAY,GAAG,IAAIN,OAAO,EAAE;IAC7B,iBAAY,GAAG,IAAI,CAACQ,YAAY,CAACF,YAAY,EAAE;IAE9C,qBAAgB,GAAG,IAAIN,OAAO,EAAe;IAC9C,qBAAgB,GAAG,IAAI,CAACS,gBAAgB,CAACH,YAAY,EAAE;IAEtD,wBAAmB,GAAG,IAAIN,OAAO,EAAe;IACjD,wBAAmB,GAAG,IAAI,CAACU,mBAAmB,CAACJ,YAAY,EAAE;;EAE5DK,cAAc;IAClB,IAAI,CAAC,IAAI,CAACC,WAAW,EAAE;MACnB;;IAEJ,IAAI,CAACA,WAAW,CAACC,EAAE,CAAC,aAAa,EAAE,MAAM,IAAI,CAACL,YAAY,CAACM,IAAI,EAAE,CAAC;EACtE;EAEaC,eAAe,CAACC,MAAc,EAAEC,QAAgB;IAAA;IAAA;MACzD,KAAI,CAACL,WAAW,GAAG,IAAIX,oBAAoB,EAAE,CACxCiB,OAAO,CAAChB,SAAS,CAACiB,SAAS,GAAG,aAAa,CAAC,CAACC,KAAK,EAAE;MACzD,MAAM,KAAI,CAACR,WAAW,CAACS,KAAK,EAAE;MAC9B,KAAI,CAACT,WAAW,CAACU,IAAI,CAAC,SAAS,EAAE;QAAEC,EAAE,EAAEP,MAAM;QAAEQ,IAAI,EAAEP;MAAQ,CAAE,CAAC;IAAC;EACrE;EAAC;qBA9BQd,iBAAiB;EAAA;EAAA;WAAjBA,iBAAiB;IAAAsB,SAAjBtB,iBAAiB;IAAAuB,YADJ;EAAM","names":["Subject","HubConnectionBuilder","constants","ConferenceService","constructor","_getParticipants","asObservable","_onToggleMicrophone","_onConnected","_onNewConnection","_onRemoveConnection","_initListeners","_connection","on","next","startConnection","userId","userName","withUrl","serverUrl","build","start","send","id","name","factory","providedIn"],"sourceRoot":"","sources":["D:\\Лабки\\VideoChat\\client\\src\\service\\conference.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Participant } from \"src/model/participant\";\r\nimport { Subject } from \"rxjs\";\r\nimport { HubConnection, HubConnectionBuilder } from \"@microsoft/signalr\";\r\nimport constants from \"src/constants\";\r\nimport { ToggleMicroEvent } from \"src/model/toggle-micro\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class ConferenceService {\r\n    private _connection?: HubConnection;\r\n    \r\n    private _getParticipants = new Subject<Participant[]>()\r\n    public getParticipants$ = this._getParticipants.asObservable();\r\n\r\n    private _onToggleMicrophone = new Subject<ToggleMicroEvent>();\r\n    public onToggleMicrophone$ = this._onToggleMicrophone.asObservable();\r\n\r\n    private _onConnected = new Subject();\r\n    public onConnected$ = this._onConnected.asObservable();\r\n\r\n    private _onNewConnection = new Subject<Participant>();\r\n    public onNewConnection$ = this._onNewConnection.asObservable();\r\n\r\n    private _onRemoveConnection = new Subject<Participant>();\r\n    public onRemoveConnection$ = this._onRemoveConnection.asObservable();\r\n\r\n    private _initListeners(): void {\r\n        if (!this._connection) {\r\n            return;\r\n        }\r\n        this._connection.on(\"OnConnected\", () => this._onConnected.next());\r\n    }\r\n\r\n    public async startConnection(userId: string, userName: string) {\r\n        this._connection = new HubConnectionBuilder()\r\n            .withUrl(constants.serverUrl + \"/conference\").build()\r\n        await this._connection.start();\r\n        this._connection.send(\"Connect\", { id: userId, name: userName });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}