{"ast":null,"code":"import _asyncToGenerator from \"D:/\\u041B\\u0430\\u0431\\u043A\\u0438/VideoChat/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport * as i0 from \"@angular/core\";\nexport class RtcService {\n  createPeer(stream, outputStream) {\n    let peer = new RTCPeerConnection();\n    stream.getTracks().forEach(track => {\n      peer.addTrack(track);\n    });\n    peer.onicecandidate = event => {\n      peer.addIceCandidate(event.candidate);\n    };\n    if (outputStream) {\n      peer.ontrack = event => {\n        event.streams[0].getTracks().forEach(track => {\n          outputStream.addTrack(track);\n        });\n      };\n    }\n    return peer;\n  }\n  getMediaStream() {\n    return _asyncToGenerator(function* () {\n      return navigator.mediaDevices.getUserMedia({\n        video: {\n          width: {\n            ideal: 800\n          },\n          height: {\n            ideal: 600\n          }\n        },\n        audio: false\n      });\n    })();\n  }\n  static #_ = this.ɵfac = function RtcService_Factory(t) {\n    return new (t || RtcService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RtcService,\n    factory: RtcService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"mappings":";;AAGA,OAAM,MAAOA,UAAU;EACZC,UAAU,CAACC,MAAmB,EAAEC,YAA8B;IACjE,IAAIC,IAAI,GAAG,IAAIC,iBAAiB,EAAE;IAClCH,MAAM,CAACI,SAAS,EAAE,CAACC,OAAO,CAAEC,KAAK,IAAI;MACnCJ,IAAI,CAACK,QAAQ,CAACD,KAAK,CAAC;IACtB,CAAC,CAAC;IACFJ,IAAI,CAACM,cAAc,GAAIC,KAAK,IAAI;MAC9BP,IAAI,CAACQ,eAAe,CAACD,KAAK,CAACE,SAAU,CAAC;IACxC,CAAC;IACD,IAAIV,YAAY,EAAE;MAChBC,IAAI,CAACU,OAAO,GAAIH,KAAK,IAAI;QACvBA,KAAK,CAACI,OAAO,CAAC,CAAC,CAAC,CAACT,SAAS,EAAE,CAACC,OAAO,CAAEC,KAAK,IAAI;UAC7CL,YAAY,CAACM,QAAQ,CAACD,KAAK,CAAC;QAC9B,CAAC,CAAC;MACJ,CAAC;;IAEH,OAAOJ,IAAI;EACf;EAEaY,cAAc;IAAA;MACvB,OAAOC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QACzCC,KAAK,EAAE;UACLC,KAAK,EAAE;YAAEC,KAAK,EAAE;UAAG,CAAE;UACrBC,MAAM,EAAE;YAAED,KAAK,EAAE;UAAG;SACrB;QACDE,KAAK,EAAE;OACR,CAAC;IAAC;EACL;EAAC;qBA3BMxB,UAAU;EAAA;EAAA;WAAVA,UAAU;IAAAyB,SAAVzB,UAAU;IAAA0B,YADG;EAAM","names":["RtcService","createPeer","stream","outputStream","peer","RTCPeerConnection","getTracks","forEach","track","addTrack","onicecandidate","event","addIceCandidate","candidate","ontrack","streams","getMediaStream","navigator","mediaDevices","getUserMedia","video","width","ideal","height","audio","factory","providedIn"],"sourceRoot":"","sources":["D:\\Лабки\\VideoChat\\client\\src\\service\\rtc.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class RtcService {\r\n    public createPeer(stream: MediaStream, outputStream: MediaStream|null): RTCPeerConnection {\r\n        let peer = new RTCPeerConnection();\r\n        stream.getTracks().forEach((track) => {\r\n          peer.addTrack(track);\r\n        });\r\n        peer.onicecandidate = (event) => {\r\n          peer.addIceCandidate(event.candidate!);\r\n        }\r\n        if (outputStream) {\r\n          peer.ontrack = (event) => {\r\n            event.streams[0].getTracks().forEach((track) => {\r\n              outputStream.addTrack(track);\r\n            });\r\n          };\r\n        }\r\n        return peer;\r\n    }\r\n\r\n    public async getMediaStream(): Promise<MediaStream> {\r\n        return navigator.mediaDevices.getUserMedia({\r\n          video: {\r\n            width: { ideal: 800 },\r\n            height: { ideal: 600 }\r\n          },\r\n          audio: false\r\n        });\r\n      }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}