{"ast":null,"code":"import _asyncToGenerator from \"D:/\\u041B\\u0430\\u0431\\u043A\\u0438/VideoChat/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Subject } from \"rxjs\";\nimport { HubConnectionBuilder, HttpTransportType } from \"@microsoft/signalr\";\nimport constants from \"src/constants\";\nimport * as i0 from \"@angular/core\";\nexport class SignalRService {\n  constructor() {\n    this._getParticipants = new Subject();\n    this.getParticipants$ = this._getParticipants.asObservable();\n    this._onToggleMicrophone = new Subject();\n    this.onToggleMicrophone$ = this._onToggleMicrophone.asObservable();\n    this._onToggleVideo = new Subject();\n    this.onToggleVideo$ = this._onToggleVideo.asObservable();\n    this._onToggleSharing = new Subject();\n    this.onToggleSharing$ = this._onToggleSharing.asObservable();\n    this._onConnected = new Subject();\n    this.onConnected$ = this._onConnected.asObservable();\n    this._onNewConnection = new Subject();\n    this.onNewConnection$ = this._onNewConnection.asObservable();\n    this._onRemoveConnection = new Subject();\n    this.onRemoveConnection$ = this._onRemoveConnection.asObservable();\n    this._onSignal = new Subject();\n    this.onSignal$ = this._onSignal.asObservable();\n  }\n  _initListeners() {\n    if (!this._connection) {\n      return;\n    }\n    this._connection.on(\"Connected\", userId => this._onConnected.next(userId));\n    this._connection.on(\"OnToggleMicrophone\", event => this._onToggleMicrophone.next(event));\n    this._connection.on(\"OnNewConnection\", participant => this._onNewConnection.next(participant));\n    this._connection.on(\"OnRemoveConnection\", participant => this._onRemoveConnection.next(participant));\n    this._connection.on(\"Signal\", signalEvent => this._onSignal.next(signalEvent));\n    this._connection.on(\"OnToggleVideo\", event => this._onToggleVideo.next(event));\n    this._connection.on(\"OnToggleSharing\", event => this._onToggleSharing.next(event));\n  }\n  startConnection(userId, userName) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this._connection = new HubConnectionBuilder().withUrl(constants.serverUrl + \"/conference\", {\n        skipNegotiation: true,\n        transport: HttpTransportType.WebSockets\n      }).build();\n      yield _this._connection.start();\n      _this._initListeners();\n      console.log(\"Connect\", userName);\n      _this._connection.send(\"Connect\", {\n        id: userId,\n        name: userName\n      });\n    })();\n  }\n  getParticipants() {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      let participants = yield _this2._connection?.invoke(\"GetParticipants\");\n      if (participants) {\n        _this2._getParticipants.next(participants);\n      }\n    })();\n  }\n  sendOnNewConnection(participant) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      yield _this3._connection?.send('OnNewConnection', participant);\n    })();\n  }\n  sendSignal(userIdSrc, userIdDest, message) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      yield _this4._connection?.send('Signal', userIdSrc, userIdDest, message);\n    })();\n  }\n  sendToggleEvent(event, isActive) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      yield _this5._connection?.send(event, isActive);\n    })();\n  }\n  leave() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      yield _this6._connection?.send(\"Leave\");\n    })();\n  }\n  static #_ = this.ɵfac = function SignalRService_Factory(t) {\n    return new (t || SignalRService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SignalRService,\n    factory: SignalRService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"mappings":";AAEA,SAASA,OAAO,QAAQ,MAAM;AAC9B,SAAwBC,oBAAoB,EAAEC,iBAAiB,QAAQ,oBAAoB;AAC3F,OAAOC,SAAS,MAAM,eAAe;;AAKrC,OAAM,MAAOC,cAAc;EAD3BC;IAIY,qBAAgB,GAAG,IAAIL,OAAO,EAAiB;IAChD,qBAAgB,GAAG,IAAI,CAACM,gBAAgB,CAACC,YAAY,EAAE;IAEtD,wBAAmB,GAAG,IAAIP,OAAO,EAAe;IACjD,wBAAmB,GAAG,IAAI,CAACQ,mBAAmB,CAACD,YAAY,EAAE;IAE5D,mBAAc,GAAG,IAAIP,OAAO,EAAe;IAC5C,mBAAc,GAAG,IAAI,CAACS,cAAc,CAACF,YAAY,EAAE;IAElD,qBAAgB,GAAG,IAAIP,OAAO,EAAe;IAC9C,qBAAgB,GAAG,IAAI,CAACU,gBAAgB,CAACH,YAAY,EAAE;IAEtD,iBAAY,GAAG,IAAIP,OAAO,EAAU;IACrC,iBAAY,GAAG,IAAI,CAACW,YAAY,CAACJ,YAAY,EAAE;IAE9C,qBAAgB,GAAG,IAAIP,OAAO,EAAe;IAC9C,qBAAgB,GAAG,IAAI,CAACY,gBAAgB,CAACL,YAAY,EAAE;IAEtD,wBAAmB,GAAG,IAAIP,OAAO,EAAe;IACjD,wBAAmB,GAAG,IAAI,CAACa,mBAAmB,CAACN,YAAY,EAAE;IAE5D,cAAS,GAAG,IAAIP,OAAO,EAAe;IACvC,cAAS,GAAG,IAAI,CAACc,SAAS,CAACP,YAAY,EAAE;;EAExCQ,cAAc;IAClB,IAAI,CAAC,IAAI,CAACC,WAAW,EAAE;MACnB;;IAEJ,IAAI,CAACA,WAAW,CAACC,EAAE,CAAC,WAAW,EAAGC,MAAc,IAAK,IAAI,CAACP,YAAY,CAACQ,IAAI,CAACD,MAAM,CAAC,CAAC;IACpF,IAAI,CAACF,WAAW,CAACC,EAAE,CAAC,oBAAoB,EACnCG,KAAkB,IAAK,IAAI,CAACZ,mBAAmB,CAACW,IAAI,CAACC,KAAK,CAAC,CAAC;IACjE,IAAI,CAACJ,WAAW,CAACC,EAAE,CAAC,iBAAiB,EAChCI,WAAwB,IAAK,IAAI,CAACT,gBAAgB,CAACO,IAAI,CAACE,WAAW,CAAC,CAAC;IAC1E,IAAI,CAACL,WAAW,CAACC,EAAE,CAAC,oBAAoB,EACnCI,WAAwB,IAAK,IAAI,CAACR,mBAAmB,CAACM,IAAI,CAACE,WAAW,CAAC,CAAC;IAC7E,IAAI,CAACL,WAAW,CAACC,EAAE,CAAC,QAAQ,EAAGK,WAAwB,IAAK,IAAI,CAACR,SAAS,CAACK,IAAI,CAACG,WAAW,CAAC,CAAC;IAC7F,IAAI,CAACN,WAAW,CAACC,EAAE,CAAC,eAAe,EAAGG,KAAkB,IAAK,IAAI,CAACX,cAAc,CAACU,IAAI,CAACC,KAAK,CAAC,CAAC;IAC7F,IAAI,CAACJ,WAAW,CAACC,EAAE,CAAC,iBAAiB,EAAGG,KAAkB,IAAK,IAAI,CAACV,gBAAgB,CAACS,IAAI,CAACC,KAAK,CAAC,CAAC;EACrG;EAEaG,eAAe,CAACL,MAAc,EAAEM,QAAgB;IAAA;IAAA;MACzD,KAAI,CAACR,WAAW,GAAG,IAAIf,oBAAoB,EAAE,CACxCwB,OAAO,CAACtB,SAAS,CAACuB,SAAS,GAAG,aAAa,EAAE;QAC1CC,eAAe,EAAE,IAAI;QACrBC,SAAS,EAAE1B,iBAAiB,CAAC2B;OAC9B,CAAC,CAACC,KAAK,EAAE;MAChB,MAAM,KAAI,CAACd,WAAW,CAACe,KAAK,EAAE;MAC9B,KAAI,CAAChB,cAAc,EAAE;MACrBiB,OAAO,CAACC,GAAG,CAAC,SAAS,EAAET,QAAQ,CAAC;MAChC,KAAI,CAACR,WAAW,CAACkB,IAAI,CAAC,SAAS,EAAE;QAAEC,EAAE,EAAEjB,MAAM;QAAEkB,IAAI,EAAEZ;MAAQ,CAAE,CAAC;IAAC;EACrE;EAEaa,eAAe;IAAA;IAAA;MACxB,IAAIC,YAAY,SAAS,MAAI,CAACtB,WAAW,EAAEuB,MAAM,CAAgB,iBAAiB,CAAC;MACnF,IAAID,YAAY,EAAE;QACd,MAAI,CAAChC,gBAAgB,CAACa,IAAI,CAACmB,YAAY,CAAC;;IAC3C;EACL;EAEaE,mBAAmB,CAACnB,WAAwB;IAAA;IAAA;MACrD,MAAM,MAAI,CAACL,WAAW,EAAEkB,IAAI,CAAC,iBAAiB,EAAEb,WAAW,CAAC;IAAC;EACjE;EAEMoB,UAAU,CAACC,SAAiB,EAAEC,UAAkB,EAAEC,OAAe;IAAA;IAAA;MACnE,MAAM,MAAI,CAAC5B,WAAW,EAAEkB,IAAI,CAAC,QAAQ,EAAEQ,SAAS,EAAEC,UAAU,EAAEC,OAAO,CAAC;IAAC;EAC3E;EAEMC,eAAe,CAACzB,KAAa,EAAE0B,QAAiB;IAAA;IAAA;MAClD,MAAM,MAAI,CAAC9B,WAAW,EAAEkB,IAAI,CAACd,KAAK,EAAE0B,QAAQ,CAAC;IAAC;EAClD;EAEMC,KAAK;IAAA;IAAA;MACP,MAAM,MAAI,CAAC/B,WAAW,EAAEkB,IAAI,CAAC,OAAO,CAAC;IAAC;EAC1C;EAAC;qBA5EQ9B,cAAc;EAAA;EAAA;WAAdA,cAAc;IAAA4C,SAAd5C,cAAc;IAAA6C,YADD;EAAM","names":["Subject","HubConnectionBuilder","HttpTransportType","constants","SignalRService","constructor","_getParticipants","asObservable","_onToggleMicrophone","_onToggleVideo","_onToggleSharing","_onConnected","_onNewConnection","_onRemoveConnection","_onSignal","_initListeners","_connection","on","userId","next","event","participant","signalEvent","startConnection","userName","withUrl","serverUrl","skipNegotiation","transport","WebSockets","build","start","console","log","send","id","name","getParticipants","participants","invoke","sendOnNewConnection","sendSignal","userIdSrc","userIdDest","message","sendToggleEvent","isActive","leave","factory","providedIn"],"sourceRoot":"","sources":["D:\\Лабки\\VideoChat\\client\\src\\service\\signalr.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Participant } from \"src/model/participant\";\r\nimport { Subject } from \"rxjs\";\r\nimport { HubConnection, HubConnectionBuilder, HttpTransportType } from \"@microsoft/signalr\";\r\nimport constants from \"src/constants\";\r\nimport { ToggleEvent } from \"src/model/toggle-event\";\r\nimport { SignalEvent } from \"src/model/signal-event\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class SignalRService {\r\n    private _connection?: HubConnection;\r\n    \r\n    private _getParticipants = new Subject<Participant[]>()\r\n    public getParticipants$ = this._getParticipants.asObservable();\r\n\r\n    private _onToggleMicrophone = new Subject<ToggleEvent>();\r\n    public onToggleMicrophone$ = this._onToggleMicrophone.asObservable();\r\n\r\n    private _onToggleVideo = new Subject<ToggleEvent>();\r\n    public onToggleVideo$ = this._onToggleVideo.asObservable();\r\n\r\n    private _onToggleSharing = new Subject<ToggleEvent>();\r\n    public onToggleSharing$ = this._onToggleSharing.asObservable();\r\n\r\n    private _onConnected = new Subject<string>();\r\n    public onConnected$ = this._onConnected.asObservable();\r\n\r\n    private _onNewConnection = new Subject<Participant>();\r\n    public onNewConnection$ = this._onNewConnection.asObservable();\r\n\r\n    private _onRemoveConnection = new Subject<Participant>();\r\n    public onRemoveConnection$ = this._onRemoveConnection.asObservable();\r\n\r\n    private _onSignal = new Subject<SignalEvent>();\r\n    public onSignal$ = this._onSignal.asObservable();\r\n\r\n    private _initListeners(): void {\r\n        if (!this._connection) {\r\n            return;\r\n        }\r\n        this._connection.on(\"Connected\", (userId: string) => this._onConnected.next(userId));\r\n        this._connection.on(\"OnToggleMicrophone\",\r\n            (event: ToggleEvent) => this._onToggleMicrophone.next(event));\r\n        this._connection.on(\"OnNewConnection\",\r\n            (participant: Participant) => this._onNewConnection.next(participant));\r\n        this._connection.on(\"OnRemoveConnection\",\r\n            (participant: Participant) => this._onRemoveConnection.next(participant));\r\n        this._connection.on(\"Signal\", (signalEvent: SignalEvent) => this._onSignal.next(signalEvent));\r\n        this._connection.on(\"OnToggleVideo\", (event: ToggleEvent) => this._onToggleVideo.next(event));\r\n        this._connection.on(\"OnToggleSharing\", (event: ToggleEvent) => this._onToggleSharing.next(event));\r\n    }\r\n\r\n    public async startConnection(userId: string, userName: string) {\r\n        this._connection = new HubConnectionBuilder()\r\n            .withUrl(constants.serverUrl + \"/conference\", {\r\n                skipNegotiation: true,\r\n                transport: HttpTransportType.WebSockets\r\n              }).build()\r\n        await this._connection.start();\r\n        this._initListeners();\r\n        console.log(\"Connect\", userName);\r\n        this._connection.send(\"Connect\", { id: userId, name: userName });\r\n    }\r\n\r\n    public async getParticipants(): Promise<void> {\r\n        let participants = await this._connection?.invoke<Participant[]>(\"GetParticipants\");\r\n        if (participants) {\r\n            this._getParticipants.next(participants);\r\n        }\r\n    }\r\n\r\n    public async sendOnNewConnection(participant: Participant) {\r\n        await this._connection?.send('OnNewConnection', participant);\r\n    }\r\n\r\n    async sendSignal(userIdSrc: string, userIdDest: string, message: string) {\r\n        await this._connection?.send('Signal', userIdSrc, userIdDest, message);\r\n    }\r\n\r\n    async sendToggleEvent(event: string, isActive: boolean) {\r\n        await this._connection?.send(event, isActive);\r\n    }\r\n\r\n    async leave() {\r\n        await this._connection?.send(\"Leave\");\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}