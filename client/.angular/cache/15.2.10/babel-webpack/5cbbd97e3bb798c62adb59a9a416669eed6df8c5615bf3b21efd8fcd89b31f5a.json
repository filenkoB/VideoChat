{"ast":null,"code":"import _asyncToGenerator from \"D:/\\u041B\\u0430\\u0431\\u043A\\u0438/VideoChat/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport class RtcService {\n  constructor() {\n    this._peerConnectionConfig = {\n      iceServers: [{\n        urls: \"stun:stun.services.mozilla.com\"\n      }, {\n        urls: \"stun:stun.l.google.com:19302\"\n      }]\n    };\n    this._onIceCandidate = new Subject();\n    this.onIceCandidate$ = this._onIceCandidate.asObservable();\n    this._onAddStream = new Subject();\n  }\n  createPeer(stream, outputStream) {\n    let peer = new RTCPeerConnection(this._peerConnectionConfig);\n    //Wait for their ice candidate       \n    peer.onicecandidate = function (event) {\n      if (event.candidate != null) {\n        console.log('SENDING ICE');\n        this.socket.emit('signal', socketListId, JSON.stringify({\n          'ice': event.candidate\n        }));\n      }\n    };\n    //Wait for their video stream\n    connections[socketListId].onaddstream = function () {\n      gotRemoteStream(event, socketListId);\n    };\n    //Add the local video stream\n    connections[socketListId].addStream(localStream);\n    stream.getTracks().forEach(track => {\n      peer.addTrack(track);\n    });\n    peer.onicecandidate = event => {\n      peer.addIceCandidate(event.candidate);\n    };\n    if (outputStream) {\n      peer.ontrack = event => {\n        event.streams[0].getTracks().forEach(track => {\n          outputStream.addTrack(track);\n        });\n      };\n    }\n    return peer;\n  }\n  getMediaStream() {\n    return _asyncToGenerator(function* () {\n      return navigator.mediaDevices.getUserMedia({\n        video: {\n          width: {\n            ideal: 800\n          },\n          height: {\n            ideal: 600\n          }\n        },\n        audio: false\n      });\n    })();\n  }\n  static #_ = this.ɵfac = function RtcService_Factory(t) {\n    return new (t || RtcService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RtcService,\n    factory: RtcService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"mappings":";AACA,SAASA,OAAO,QAAQ,MAAM;;AAG9B,OAAM,MAAOC,UAAU;EADvBC;IAEmB,0BAAqB,GAAI;MACxCC,UAAU,EAAE,CACV;QAAEC,IAAI,EAAE;MAAgC,CAAE,EAC1C;QAAEA,IAAI,EAAE;MAA8B,CAAE;KAE3C;IAEO,oBAAe,GAAG,IAAIJ,OAAO,EAA6B;IAC3D,oBAAe,GAAG,IAAI,CAACK,eAAe,CAACC,YAAY,EAAE;IAEpD,iBAAY,GAAG,IAAIN,OAAO;;EAE3BO,UAAU,CAACC,MAAmB,EAAEC,YAA8B;IACnE,IAAIC,IAAI,GAAG,IAAIC,iBAAiB,CAAC,IAAI,CAACC,qBAAqB,CAAC;IAC5D;IACAF,IAAI,CAACG,cAAc,GAAG,UAASC,KAAK;MAChC,IAAGA,KAAK,CAACC,SAAS,IAAI,IAAI,EAAE;QACxBC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;QAC1B,IAAI,CACJC,MAAM,CAACC,IAAI,CAAC,QAAQ,EAAEC,YAAY,EAAEC,IAAI,CAACC,SAAS,CAAC;UAAC,KAAK,EAAER,KAAK,CAACC;QAAS,CAAC,CAAC,CAAC;;IAErF,CAAC;IAED;IACAQ,WAAW,CAACH,YAAY,CAAC,CAACI,WAAW,GAAG;MACpCC,eAAe,CAACX,KAAK,EAAEM,YAAY,CAAC;IACxC,CAAC;IAED;IACAG,WAAW,CAACH,YAAY,CAAC,CAACM,SAAS,CAACC,WAAW,CAAC;IAChDnB,MAAM,CAACoB,SAAS,EAAE,CAACC,OAAO,CAAEC,KAAK,IAAI;MACnCpB,IAAI,CAACqB,QAAQ,CAACD,KAAK,CAAC;IACtB,CAAC,CAAC;IACFpB,IAAI,CAACG,cAAc,GAAIC,KAAK,IAAI;MAC9BJ,IAAI,CAACsB,eAAe,CAAClB,KAAK,CAACC,SAAU,CAAC;IACxC,CAAC;IACD,IAAIN,YAAY,EAAE;MAChBC,IAAI,CAACuB,OAAO,GAAInB,KAAK,IAAI;QACvBA,KAAK,CAACoB,OAAO,CAAC,CAAC,CAAC,CAACN,SAAS,EAAE,CAACC,OAAO,CAAEC,KAAK,IAAI;UAC7CrB,YAAY,CAACsB,QAAQ,CAACD,KAAK,CAAC;QAC9B,CAAC,CAAC;MACJ,CAAC;;IAEH,OAAOpB,IAAI;EACb;EAEayB,cAAc;IAAA;MACzB,OAAOC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QACzCC,KAAK,EAAE;UACLC,KAAK,EAAE;YAAEC,KAAK,EAAE;UAAG,CAAE;UACrBC,MAAM,EAAE;YAAED,KAAK,EAAE;UAAG;SACrB;QACDE,KAAK,EAAE;OACR,CAAC;IAAC;EACL;EAAC;qBAvDU1C,UAAU;EAAA;EAAA;WAAVA,UAAU;IAAA2C,SAAV3C,UAAU;IAAA4C,YADG;EAAM","names":["Subject","RtcService","constructor","iceServers","urls","_onIceCandidate","asObservable","createPeer","stream","outputStream","peer","RTCPeerConnection","_peerConnectionConfig","onicecandidate","event","candidate","console","log","socket","emit","socketListId","JSON","stringify","connections","onaddstream","gotRemoteStream","addStream","localStream","getTracks","forEach","track","addTrack","addIceCandidate","ontrack","streams","getMediaStream","navigator","mediaDevices","getUserMedia","video","width","ideal","height","audio","factory","providedIn"],"sourceRoot":"","sources":["D:\\Лабки\\VideoChat\\client\\src\\service\\rtc.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Subject } from \"rxjs\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class RtcService {\r\n  private readonly _peerConnectionConfig =  {\r\n    iceServers: [\r\n      { urls: \"stun:stun.services.mozilla.com\" },\r\n      { urls: \"stun:stun.l.google.com:19302\" },\r\n    ]\r\n  };\r\n\r\n  private _onIceCandidate = new Subject<RTCPeerConnectionIceEvent>();\r\n  public onIceCandidate$ = this._onIceCandidate.asObservable();\r\n\r\n  private _onAddStream = new Subject\r\n\r\n  public createPeer(stream: MediaStream, outputStream: MediaStream|null): RTCPeerConnection {\r\n    let peer = new RTCPeerConnection(this._peerConnectionConfig);\r\n    //Wait for their ice candidate       \r\n    peer.onicecandidate = function(event){\r\n        if(event.candidate != null) {\r\n            console.log('SENDING ICE');\r\n            this.\r\n            socket.emit('signal', socketListId, JSON.stringify({'ice': event.candidate}));\r\n        }\r\n    }\r\n\r\n    //Wait for their video stream\r\n    connections[socketListId].onaddstream = function(){\r\n        gotRemoteStream(event, socketListId)\r\n    }    \r\n\r\n    //Add the local video stream\r\n    connections[socketListId].addStream(localStream);   \r\n    stream.getTracks().forEach((track) => {\r\n      peer.addTrack(track);\r\n    });\r\n    peer.onicecandidate = (event) => {\r\n      peer.addIceCandidate(event.candidate!);\r\n    }\r\n    if (outputStream) {\r\n      peer.ontrack = (event) => {\r\n        event.streams[0].getTracks().forEach((track) => {\r\n          outputStream.addTrack(track);\r\n        });\r\n      };\r\n    }\r\n    return peer;\r\n  }\r\n\r\n  public async getMediaStream(): Promise<MediaStream> {\r\n    return navigator.mediaDevices.getUserMedia({\r\n      video: {\r\n        width: { ideal: 800 },\r\n        height: { ideal: 600 }\r\n      },\r\n      audio: false\r\n    });\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}