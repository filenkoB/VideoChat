{"ast":null,"code":"import _asyncToGenerator from \"D:/\\u041B\\u0430\\u0431\\u043A\\u0438/VideoChat/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Subject } from \"rxjs\";\nimport { HubConnectionBuilder } from \"@microsoft/signalr\";\nimport constants from \"src/constants\";\nimport * as i0 from \"@angular/core\";\nexport class ConferenceService {\n  constructor() {\n    this._getParticipants = new Subject();\n    this.getParticipants$ = this._getParticipants.asObservable();\n    this._onToggleMicrophone = new Subject();\n    this.onToggleMicrophone$ = this._onToggleMicrophone.asObservable();\n    this._onNewConnection = new Subject();\n    this.onNewConnection$ = this._onNewConnection.asObservable();\n    this._onRemoveConnection = new Subject();\n    this.onRemoveConnection$ = this._onRemoveConnection.asObservable();\n  }\n  startConnection() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this._connection = new HubConnectionBuilder().withUrl(constants.serverUrl + \"/conference\").build();\n      yield _this._connection.start();\n    })();\n  }\n  static connect() {\n    return from(SignalR.connection.start());\n  }\n  static startConnection(userId, userName) {\n    SignalR.connection.on(\"Connected\", () => {\n      console.log(`Id: ${userId} Name: ${userName} - connected succesfully`);\n      SignalR.connection.off(\"Connected\");\n    });\n    return from(SignalR.connection.send(\"Connect\", {\n      id: userId,\n      name: userName\n    }));\n  }\n  static #_ = this.ɵfac = function ConferenceService_Factory(t) {\n    return new (t || ConferenceService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConferenceService,\n    factory: ConferenceService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"mappings":";AAEA,SAASA,OAAO,QAAQ,MAAM;AAC9B,SAAwBC,oBAAoB,QAAQ,oBAAoB;AACxE,OAAOC,SAAS,MAAM,eAAe;;AAGrC,OAAM,MAAOC,iBAAiB;EAD9BC;IAIY,qBAAgB,GAAG,IAAIJ,OAAO,EAAiB;IAChD,qBAAgB,GAAG,IAAI,CAACK,gBAAgB,CAACC,YAAY,EAAE;IAEtD,wBAAmB,GAAG,IAAIN,OAAO,EAAW;IAC7C,wBAAmB,GAAG,IAAI,CAACO,mBAAmB,CAACD,YAAY,EAAE;IAE5D,qBAAgB,GAAG,IAAIN,OAAO,EAAe;IAC9C,qBAAgB,GAAG,IAAI,CAACQ,gBAAgB,CAACF,YAAY,EAAE;IAEtD,wBAAmB,GAAG,IAAIN,OAAO,EAAe;IACjD,wBAAmB,GAAG,IAAI,CAACS,mBAAmB,CAACH,YAAY,EAAE;;EAEvDI,eAAe;IAAA;IAAA;MACxB,KAAI,CAACC,WAAW,GAAG,IAAIV,oBAAoB,EAAE,CACxCW,OAAO,CAACV,SAAS,CAACW,SAAS,GAAG,aAAa,CAAC,CAACC,KAAK,EAAE;MACzD,MAAM,KAAI,CAACH,WAAW,CAACI,KAAK,EAAE;IAAC;EACnC;EAEO,OAAOC,OAAO;IACjB,OAAOC,IAAI,CAACC,OAAO,CAACC,UAAU,CAACJ,KAAK,EAAE,CAAC;EAC3C;EAEO,OAAOL,eAAe,CAACU,MAAc,EAAEC,QAAgB;IAC1DH,OAAO,CAACC,UAAU,CAACG,EAAE,CAAC,WAAW,EAAE,MAAK;MACpCC,OAAO,CAACC,GAAG,CAAC,OAAOJ,MAAM,UAAUC,QAAQ,0BAA0B,CAAC;MACtEH,OAAO,CAACC,UAAU,CAACM,GAAG,CAAC,WAAW,CAAC;IACvC,CAAC,CAAC;IACF,OAAOR,IAAI,CAACC,OAAO,CAACC,UAAU,CAACO,IAAI,CAAC,SAAS,EAAE;MAAEC,EAAE,EAAEP,MAAM;MAAEQ,IAAI,EAAEP;IAAQ,CAAE,CAAC,CAAC;EACnF;EAAC;qBA/BQlB,iBAAiB;EAAA;EAAA;WAAjBA,iBAAiB;IAAA0B,SAAjB1B,iBAAiB;IAAA2B,YADJ;EAAM","names":["Subject","HubConnectionBuilder","constants","ConferenceService","constructor","_getParticipants","asObservable","_onToggleMicrophone","_onNewConnection","_onRemoveConnection","startConnection","_connection","withUrl","serverUrl","build","start","connect","from","SignalR","connection","userId","userName","on","console","log","off","send","id","name","factory","providedIn"],"sourceRoot":"","sources":["D:\\Лабки\\VideoChat\\client\\src\\service\\conference.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Participant } from \"src/model/participant\";\r\nimport { Subject } from \"rxjs\";\r\nimport { HubConnection, HubConnectionBuilder } from \"@microsoft/signalr\";\r\nimport constants from \"src/constants\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class ConferenceService {\r\n    private _connection?: HubConnection;\r\n    \r\n    private _getParticipants = new Subject<Participant[]>()\r\n    public getParticipants$ = this._getParticipants.asObservable();\r\n\r\n    private _onToggleMicrophone = new Subject<boolean>();\r\n    public onToggleMicrophone$ = this._onToggleMicrophone.asObservable();\r\n\r\n    private _onNewConnection = new Subject<Participant>();\r\n    public onNewConnection$ = this._onNewConnection.asObservable();\r\n\r\n    private _onRemoveConnection = new Subject<Participant>();\r\n    public onRemoveConnection$ = this._onRemoveConnection.asObservable();\r\n\r\n    public async startConnection() {\r\n        this._connection = new HubConnectionBuilder()\r\n            .withUrl(constants.serverUrl + \"/conference\").build()\r\n        await this._connection.start();\r\n    }\r\n \r\n    public static connect() : Observable<void> {\r\n        return from(SignalR.connection.start());\r\n    }\r\n\r\n    public static startConnection(userId: string, userName: string) : Observable<void> {\r\n        SignalR.connection.on(\"Connected\", () => {\r\n            console.log(`Id: ${userId} Name: ${userName} - connected succesfully`);\r\n            SignalR.connection.off(\"Connected\");\r\n        });\r\n        return from(SignalR.connection.send(\"Connect\", { id: userId, name: userName }));\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}