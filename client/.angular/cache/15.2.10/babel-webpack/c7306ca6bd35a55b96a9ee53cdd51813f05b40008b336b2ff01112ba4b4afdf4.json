{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class MediaService {\n  getMediaStream() {\n    return navigator.mediaDevices.getUserMedia({\n      video: false,\n      audio: false\n    });\n  }\n  getVideoTrack() {\n    return navigator.mediaDevices.getUserMedia({\n      video: {\n        width: {\n          ideal: 1920\n        },\n        height: {\n          ideal: 1080\n        }\n      }\n    }).then(stream => stream.getVideoTracks()[0]);\n  }\n  static #_ = this.ɵfac = function MediaService_Factory(t) {\n    return new (t || MediaService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MediaService,\n    factory: MediaService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"mappings":";AAGA,OAAM,MAAOA,YAAY;EACdC,cAAc;IACjB,OAAOC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MACvCC,KAAK,EAAE,KAAK;MACZC,KAAK,EAAE;KACV,CAAC;EACN;EAEOC,aAAa;IAChB,OAAOL,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MACnCC,KAAK,EAAE;QACHG,KAAK,EAAE;UAAEC,KAAK,EAAE;QAAI,CAAE;QACtBC,MAAM,EAAE;UAAED,KAAK,EAAE;QAAI;;KAE5B,CAAC,CACDE,IAAI,CAAEC,MAAmB,IAAKA,MAAM,CAACC,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC;EAClE;EAAC;qBAhBQb,YAAY;EAAA;EAAA;WAAZA,YAAY;IAAAc,SAAZd,YAAY;IAAAe,YADC;EAAM","names":["MediaService","getMediaStream","navigator","mediaDevices","getUserMedia","video","audio","getVideoTrack","width","ideal","height","then","stream","getVideoTracks","factory","providedIn"],"sourceRoot":"","sources":["D:\\Лабки\\VideoChat\\client\\src\\service\\media.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class MediaService {\r\n    public getMediaStream() : Promise<MediaStream> {\r\n        return navigator.mediaDevices.getUserMedia({\r\n            video: false,\r\n            audio: false\r\n        });\r\n    }\r\n\r\n    public getVideoTrack() : Promise<MediaStreamTrack> {\r\n        return navigator.mediaDevices.getUserMedia({\r\n                video: {\r\n                    width: { ideal: 1920 },\r\n                    height: { ideal: 1080 }\r\n                }\r\n            })\r\n            .then((stream: MediaStream) => stream.getVideoTracks()[0]);\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}