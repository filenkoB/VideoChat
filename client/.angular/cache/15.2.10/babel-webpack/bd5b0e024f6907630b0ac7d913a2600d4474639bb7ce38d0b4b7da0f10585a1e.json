{"ast":null,"code":"import _asyncToGenerator from \"D:/\\u041B\\u0430\\u0431\\u043A\\u0438/VideoChat/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./signalr.service\";\nexport class RtcService {\n  constructor(_signalR) {\n    this._signalR = _signalR;\n    this._peerConnectionConfig = {\n      iceServers: [{\n        urls: \"stun:stun.services.mozilla.com\"\n      }, {\n        urls: \"stun:stun.l.google.com:19302\"\n      }, {\n        urls: \"stun:stun.awt.be:3478\"\n      }, {\n        urls: \"stun:stun.b2b2c.ca:3478\"\n      }, {\n        urls: \"stun:stun.bahnhof.net:3478\"\n      }, {\n        urls: \"stun:stun.barracuda.com:3478\"\n      }, {\n        urls: \"stun:stun.bluesip.net:3478\"\n      }, {\n        urls: \"stun:stun.bmwgs.cz:3478\"\n      }, {\n        urls: \"stun:stun.botonakis.com:3478\"\n      }, {\n        urls: \"stun:stun.budgetphone.nl:3478\"\n      }, {\n        urls: \"stun:stun.cablenet-as.net:3478\"\n      }]\n    };\n    this._onIceCandidate = new Subject();\n    this.onIceCandidate$ = this._onIceCandidate.asObservable();\n  }\n  createPeer(stream, outputStream, userSrcId, userDestId) {\n    let peer = new RTCPeerConnection(this._peerConnectionConfig);\n    stream.getTracks().forEach(track => {\n      peer.addTrack(track, stream);\n    });\n    peer.onicecandidate = event => {\n      if (event.candidate != null) {\n        this._signalR.sendSignal(userSrcId, userDestId, JSON.stringify({\n          \"ice\": event.candidate\n        }));\n      }\n    };\n    peer.ontrack = event => {\n      event.streams[0].getTracks().forEach(track => {\n        outputStream.addTrack(track);\n      });\n    };\n    return peer;\n  }\n  getVideoStream() {\n    return _asyncToGenerator(function* () {\n      return yield navigator.mediaDevices.getUserMedia({\n        video: {\n          width: {\n            max: 800\n          },\n          height: {\n            max: 600\n          }\n        },\n        audio: false\n      });\n    })();\n  }\n  getSharingStream() {\n    return _asyncToGenerator(function* () {\n      return yield navigator.mediaDevices.getDisplayMedia({\n        video: true\n      });\n    })();\n  }\n  getMediaStream() {\n    return _asyncToGenerator(function* () {\n      let stream = yield navigator.mediaDevices.getUserMedia({\n        audio: {\n          sampleRate: 48000,\n          channelCount: 2,\n          echoCancellation: true,\n          noiseSuppression: true\n        },\n        video: false\n      });\n      stream.getAudioTracks().forEach(track => {\n        track.enabled = false;\n      });\n      return stream;\n    })();\n  }\n  static #_ = this.ɵfac = function RtcService_Factory(t) {\n    return new (t || RtcService)(i0.ɵɵinject(i1.SignalRService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RtcService,\n    factory: RtcService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"mappings":";AACA,SAASA,OAAO,QAAQ,MAAM;;;AAI9B,OAAM,MAAOC,UAAU;EAoBrBC,YAA6BC,QAAwB;IAAxB,aAAQ,GAARA,QAAQ;IAnBpB,0BAAqB,GAAI;MACxCC,UAAU,EAAE,CACV;QAAEC,IAAI,EAAE;MAAgC,CAAE,EAC1C;QAAEA,IAAI,EAAE;MAA8B,CAAE,EACxC;QAAEA,IAAI,EAAE;MAAuB,CAAE,EACjC;QAAEA,IAAI,EAAE;MAAyB,CAAE,EACnC;QAAEA,IAAI,EAAE;MAA4B,CAAE,EACtC;QAAEA,IAAI,EAAE;MAA8B,CAAE,EACxC;QAAEA,IAAI,EAAE;MAA4B,CAAE,EACtC;QAAEA,IAAI,EAAE;MAAyB,CAAE,EACnC;QAAEA,IAAI,EAAE;MAA8B,CAAE,EACxC;QAAEA,IAAI,EAAE;MAA+B,CAAE,EACzC;QAAEA,IAAI,EAAE;MAAgC,CAAE;KAE7C;IAEO,oBAAe,GAAG,IAAIL,OAAO,EAA6B;IAC3D,oBAAe,GAAG,IAAI,CAACM,eAAe,CAACC,YAAY,EAAE;EAEJ;EAEjDC,UAAU,CAACC,MAAmB,EAAEC,YAAyB,EAAEC,SAAiB,EAAEC,UAAkB;IACrG,IAAIC,IAAI,GAAG,IAAIC,iBAAiB,CAAC,IAAI,CAACC,qBAAqB,CAAC;IAC5DN,MAAM,CAACO,SAAS,EAAE,CAACC,OAAO,CAAEC,KAAK,IAAI;MACnCL,IAAI,CAACM,QAAQ,CAACD,KAAK,EAAET,MAAM,CAAC;IAC9B,CAAC,CAAC;IACFI,IAAI,CAACO,cAAc,GAAIC,KAAK,IAAI;MAC9B,IAAGA,KAAK,CAACC,SAAS,IAAI,IAAI,EAAE;QAC1B,IAAI,CAACnB,QAAQ,CAACoB,UAAU,CAACZ,SAAS,EAAEC,UAAU,EAAEY,IAAI,CAACC,SAAS,CAAC;UAAE,KAAK,EAAEJ,KAAK,CAACC;QAAS,CAAE,CAAC,CAAC;;IAE/F,CAAC;IAEDT,IAAI,CAACa,OAAO,GAAIL,KAAK,IAAI;MACvBA,KAAK,CAACM,OAAO,CAAC,CAAC,CAAC,CAACX,SAAS,EAAE,CAACC,OAAO,CAACC,KAAK,IAAG;QAC3CR,YAAY,CAACS,QAAQ,CAACD,KAAK,CAAC;MAC9B,CAAC,CAAC;IACJ,CAAC;IACD,OAAOL,IAAI;EACb;EAEae,cAAc;IAAA;MACzB,aAAaC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QAC/CC,KAAK,EAAE;UACLC,KAAK,EAAE;YAAEC,GAAG,EAAE;UAAG,CAAE;UACnBC,MAAM,EAAE;YAAED,GAAG,EAAE;UAAG;SACnB;QACDE,KAAK,EAAE;OACR,CAAC;IAAC;EACL;EAEaC,gBAAgB;IAAA;MAC3B,aAAaR,SAAS,CAACC,YAAY,CAACQ,eAAe,CAAC;QAClDN,KAAK,EAAE;OACR,CAAC;IAAC;EACL;EAEaO,cAAc;IAAA;MACzB,IAAI9B,MAAM,SAASoB,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QACrDK,KAAK,EAAE;UACLI,UAAU,EAAE,KAAK;UACjBC,YAAY,EAAE,CAAC;UACfC,gBAAgB,EAAE,IAAI;UACtBC,gBAAgB,EAAE;SACnB;QACDX,KAAK,EAAE;OACR,CAAC;MACFvB,MAAM,CAACmC,cAAc,EAAE,CAAC3B,OAAO,CAAEC,KAAK,IAAI;QACxCA,KAAK,CAAC2B,OAAO,GAAG,KAAK;MACvB,CAAC,CAAC;MACF,OAAOpC,MAAM;IAAC;EAChB;EAAC;qBAvEUR,UAAU;EAAA;EAAA;WAAVA,UAAU;IAAA6C,SAAV7C,UAAU;IAAA8C,YADG;EAAM","names":["Subject","RtcService","constructor","_signalR","iceServers","urls","_onIceCandidate","asObservable","createPeer","stream","outputStream","userSrcId","userDestId","peer","RTCPeerConnection","_peerConnectionConfig","getTracks","forEach","track","addTrack","onicecandidate","event","candidate","sendSignal","JSON","stringify","ontrack","streams","getVideoStream","navigator","mediaDevices","getUserMedia","video","width","max","height","audio","getSharingStream","getDisplayMedia","getMediaStream","sampleRate","channelCount","echoCancellation","noiseSuppression","getAudioTracks","enabled","factory","providedIn"],"sourceRoot":"","sources":["D:\\Лабки\\VideoChat\\client\\src\\service\\rtc.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Subject } from \"rxjs\";\r\nimport { SignalRService } from \"./signalr.service\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class RtcService {\r\n  private readonly _peerConnectionConfig =  {\r\n    iceServers: [\r\n      { urls: \"stun:stun.services.mozilla.com\" },\r\n      { urls: \"stun:stun.l.google.com:19302\" },\r\n      { urls: \"stun:stun.awt.be:3478\" },\r\n      { urls: \"stun:stun.b2b2c.ca:3478\" },\r\n      { urls: \"stun:stun.bahnhof.net:3478\" },\r\n      { urls: \"stun:stun.barracuda.com:3478\" },\r\n      { urls: \"stun:stun.bluesip.net:3478\" },\r\n      { urls: \"stun:stun.bmwgs.cz:3478\" },\r\n      { urls: \"stun:stun.botonakis.com:3478\" },\r\n      { urls: \"stun:stun.budgetphone.nl:3478\" },\r\n      { urls: \"stun:stun.cablenet-as.net:3478\" }\r\n    ]\r\n  };\r\n\r\n  private _onIceCandidate = new Subject<RTCPeerConnectionIceEvent>();\r\n  public onIceCandidate$ = this._onIceCandidate.asObservable();\r\n\r\n  constructor(private readonly _signalR: SignalRService) {}\r\n\r\n  public createPeer(stream: MediaStream, outputStream: MediaStream, userSrcId: string, userDestId: string): RTCPeerConnection {\r\n    let peer = new RTCPeerConnection(this._peerConnectionConfig);\r\n    stream.getTracks().forEach((track) => {\r\n      peer.addTrack(track, stream);\r\n    });\r\n    peer.onicecandidate = (event) => {\r\n      if(event.candidate != null) {\r\n        this._signalR.sendSignal(userSrcId, userDestId, JSON.stringify({ \"ice\": event.candidate }));\r\n      }\r\n    };\r\n\r\n    peer.ontrack = (event) => {\r\n      event.streams[0].getTracks().forEach(track => {\r\n        outputStream.addTrack(track);\r\n      });\r\n    };\r\n    return peer;\r\n  }\r\n\r\n  public async getVideoStream(): Promise<MediaStream> {\r\n    return await navigator.mediaDevices.getUserMedia({\r\n      video: {\r\n        width: { max: 800 },\r\n        height: { max: 600 }\r\n      },\r\n      audio: false\r\n    });\r\n  }\r\n\r\n  public async getSharingStream(): Promise<MediaStream> {\r\n    return await navigator.mediaDevices.getDisplayMedia({\r\n      video: true\r\n    });\r\n  }\r\n\r\n  public async getMediaStream(): Promise<MediaStream> {\r\n    let stream = await navigator.mediaDevices.getUserMedia({\r\n      audio: {\r\n        sampleRate: 48000,\r\n        channelCount: 2,\r\n        echoCancellation: true,\r\n        noiseSuppression: true\r\n      },\r\n      video: false\r\n    });\r\n    stream.getAudioTracks().forEach((track) => {\r\n      track.enabled = false;\r\n    });\r\n    return stream;\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}