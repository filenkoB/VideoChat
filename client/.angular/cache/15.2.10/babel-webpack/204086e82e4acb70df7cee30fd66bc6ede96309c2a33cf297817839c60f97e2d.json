{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport class RtcService {\n  constructor() {\n    this._onSignal = new Subject();\n    this.onSignal$ = this._onSignal.asObservable();\n    this._onStream = new Subject();\n    this.onStream = this._onStream.asObservable();\n  }\n  createPeer(stream, userId, initiator) {\n    const peer = new window[\"SimplePeer\"]();\n    peer.on('signal', data => {\n      this._onSignal.next(JSON.stringify(data));\n    });\n    peer.on('stream', data => {\n      this._onStream.next({\n        id: userId,\n        data: data\n      });\n    });\n    return peer;\n  }\n  signalPeer(currentPeer, userId, signal, stream) {\n    const signalObject = JSON.parse(signal);\n    if (currentPeer) {\n      currentPeer.signal(signalObject);\n    } else {\n      currentPeer = this.createPeer(stream, userId, false);\n      currentPeer.signal(signalObject);\n    }\n  }\n  static #_ = this.ɵfac = function RtcService_Factory(t) {\n    return new (t || RtcService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RtcService,\n    factory: RtcService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"mappings":"AACA,SAASA,OAAO,QAAQ,MAAM;;AAK9B,OAAM,MAAOC,UAAU;EADvBC;IAEY,cAAS,GAAG,IAAIF,OAAO,EAAU;IAClC,cAAS,GAAG,IAAI,CAACG,SAAS,CAACC,YAAY,EAAE;IAExC,cAAS,GAAG,IAAIJ,OAAO,EAAiB;IACzC,aAAQ,GAAG,IAAI,CAACK,SAAS,CAACD,YAAY,EAAE;;EAExCE,UAAU,CAACC,MAAmB,EAAEC,MAAc,EAAEC,SAAkB;IACrE,MAAMC,IAAI,GAAG,IAAKC,MAAc,CAAC,YAAY,CAAC,EAAE;IAEhDD,IAAI,CAACE,EAAE,CAAC,QAAQ,EAAGC,IAA2B,IAAI;MAChD,IAAI,CAACV,SAAS,CAACW,IAAI,CAACC,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,CAAC;IAC3C,CAAC,CAAC;IAEFH,IAAI,CAACE,EAAE,CAAC,QAAQ,EAAGC,IAAiB,IAAI;MACtC,IAAI,CAACR,SAAS,CAACS,IAAI,CAAC;QAAEG,EAAE,EAAET,MAAM;QAAEK,IAAI,EAAEA;MAAI,CAAE,CAAC;IACjD,CAAC,CAAC;IAEF,OAAOH,IAAI;EACf;EAEOQ,UAAU,CAACC,WAAgC,EAAEX,MAAc,EAAEY,MAAc,EAAEb,MAAW;IAC3F,MAAMc,YAAY,GAAGN,IAAI,CAACO,KAAK,CAACF,MAAM,CAAC;IACvC,IAAID,WAAW,EAAE;MACbA,WAAW,CAACC,MAAM,CAACC,YAAY,CAAC;KACnC,MAAM;MACHF,WAAW,GAAG,IAAI,CAACb,UAAU,CAACC,MAAM,EAAEC,MAAM,EAAE,KAAK,CAAC;MACpDW,WAAW,CAACC,MAAM,CAACC,YAAY,CAAC;;EAExC;EAAC;qBA7BQpB,UAAU;EAAA;EAAA;WAAVA,UAAU;IAAAsB,SAAVtB,UAAU;IAAAuB,YADG;EAAM","names":["Subject","RtcService","constructor","_onSignal","asObservable","_onStream","createPeer","stream","userId","initiator","peer","window","on","data","next","JSON","stringify","id","signalPeer","currentPeer","signal","signalObject","parse","factory","providedIn"],"sourceRoot":"","sources":["D:\\Лабки\\VideoChat\\client\\src\\service\\rtc.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Subject } from \"rxjs\";\r\nimport * as SimplePeer from \"simple-peer\";\r\nimport { OnStreamEvent } from \"src/model/on-stream-event\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class RtcService {\r\n    private _onSignal = new Subject<string>();\r\n    public onSignal$ = this._onSignal.asObservable();\r\n\r\n    private _onStream = new Subject<OnStreamEvent>();\r\n    public onStream = this._onStream.asObservable();\r\n\r\n    public createPeer(stream: MediaStream, userId: string, initiator: boolean): SimplePeer.Instance {\r\n        const peer = new (window as any)[\"SimplePeer\"]();\r\n    \r\n        peer.on('signal', (data: SimplePeer.SignalData) => {\r\n          this._onSignal.next(JSON.stringify(data));\r\n        });\r\n    \r\n        peer.on('stream', (data: MediaStream) => {\r\n          this._onStream.next({ id: userId, data: data });\r\n        });\r\n    \r\n        return peer;\r\n    }\r\n\r\n    public signalPeer(currentPeer: SimplePeer.Instance, userId: string, signal: string, stream: any) {\r\n        const signalObject = JSON.parse(signal);\r\n        if (currentPeer) {\r\n            currentPeer.signal(signalObject);\r\n        } else {\r\n            currentPeer = this.createPeer(stream, userId, false);\r\n            currentPeer.signal(signalObject);\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}