{"ast":null,"code":"import _asyncToGenerator from \"D:/\\u041B\\u0430\\u0431\\u043A\\u0438/Semantic/FootballGuide/VideoChat/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { Subject } from \"rxjs\";\nimport { ConferencePeer } from \"src/model/conference-peer\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./signalr.service\";\nexport class RtcService {\n  constructor(_signalR) {\n    this._signalR = _signalR;\n    this._onIceCandidate = new Subject();\n    this.onIceCandidate$ = this._onIceCandidate.asObservable();\n  }\n  createPeer(stream, outputStream, userSrcId, userDestId) {\n    let peer = new ConferencePeer(stream, outputStream);\n    peer.onCandidate().then(event => {\n      this._signalR.sendSignal(userSrcId, userDestId, JSON.stringify({\n        \"ice\": event.candidate\n      }));\n    });\n    return peer;\n  }\n  getVideoStream() {\n    return _asyncToGenerator(function* () {\n      return yield navigator.mediaDevices.getUserMedia({\n        video: {\n          width: {\n            max: 800\n          },\n          height: {\n            max: 600\n          }\n        },\n        audio: false\n      });\n    })();\n  }\n  getSharingTrack() {\n    return _asyncToGenerator(function* () {\n      let options = {\n        video: {\n          width: {\n            max: 1270\n          },\n          height: {\n            max: 720\n          }\n        }\n      };\n      debugger;\n      return (yield navigator.mediaDevices.getDisplayMedia(options)).getVideoTracks()[0];\n    })();\n  }\n  getMediaStream() {\n    return _asyncToGenerator(function* () {\n      let stream = yield navigator.mediaDevices.getUserMedia({\n        audio: {\n          sampleRate: 48000,\n          channelCount: 2,\n          echoCancellation: true,\n          noiseSuppression: true\n        },\n        video: false\n      });\n      stream.getAudioTracks().forEach(track => {\n        track.enabled = false;\n      });\n      return stream;\n    })();\n  }\n  static #_ = this.ɵfac = function RtcService_Factory(t) {\n    return new (t || RtcService)(i0.ɵɵinject(i1.SignalRService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RtcService,\n    factory: RtcService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"mappings":";AACA,SAASA,OAAO,QAAQ,MAAM;AAE9B,SAASC,cAAc,QAAQ,2BAA2B;;;AAG1D,OAAM,MAAOC,UAAU;EAIrBC,YAA6BC,QAAwB;IAAxB,aAAQ,GAARA,QAAQ;IAH7B,oBAAe,GAAG,IAAIJ,OAAO,EAA6B;IAC3D,oBAAe,GAAG,IAAI,CAACK,eAAe,CAACC,YAAY,EAAE;EAEJ;EAEjDC,UAAU,CAACC,MAAmB,EAAEC,YAAyB,EAAEC,SAAiB,EAAEC,UAAkB;IACrG,IAAIC,IAAI,GAAG,IAAIX,cAAc,CAACO,MAAM,EAAEC,YAAY,CAAC;IACnDG,IAAI,CAACC,WAAW,EAAE,CAACC,IAAI,CAAEC,KAAK,IAAI;MAChC,IAAI,CAACX,QAAQ,CAACY,UAAU,CAACN,SAAS,EAAEC,UAAU,EAAEM,IAAI,CAACC,SAAS,CAAC;QAAE,KAAK,EAAEH,KAAK,CAACI;MAAS,CAAE,CAAC,CAAC;IAC7F,CAAC,CAAC;IACF,OAAOP,IAAI;EACb;EAEaQ,cAAc;IAAA;MACzB,aAAaC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QAC/CC,KAAK,EAAE;UACLC,KAAK,EAAE;YAAEC,GAAG,EAAE;UAAG,CAAE;UACnBC,MAAM,EAAE;YAAED,GAAG,EAAE;UAAG;SACnB;QACDE,KAAK,EAAE;OACR,CAAC;IAAC;EACL;EAEaC,eAAe;IAAA;MAC1B,IAAIC,OAAO,GAAG;QACZN,KAAK,EAAE;UACLC,KAAK,EAAE;YAAEC,GAAG,EAAE;UAAI,CAAE;UACpBC,MAAM,EAAE;YAAED,GAAG,EAAE;UAAG;;OAErB;MACD;MACA,OAAO,OAAOL,SAAS,CAACC,YAAY,CAACS,eAAe,CAACD,OAAO,CAAC,EAAEE,cAAc,EAAE,CAAC,CAAC,CAAC;IAAC;EACrF;EAEaC,cAAc;IAAA;MACzB,IAAIzB,MAAM,SAASa,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;QACrDK,KAAK,EAAE;UACLM,UAAU,EAAE,KAAK;UACjBC,YAAY,EAAE,CAAC;UACfC,gBAAgB,EAAE,IAAI;UACtBC,gBAAgB,EAAE;SACnB;QACDb,KAAK,EAAE;OACR,CAAC;MACFhB,MAAM,CAAC8B,cAAc,EAAE,CAACC,OAAO,CAAEC,KAAK,IAAI;QACxCA,KAAK,CAACC,OAAO,GAAG,KAAK;MACvB,CAAC,CAAC;MACF,OAAOjC,MAAM;IAAC;EAChB;EAAC;qBAjDUN,UAAU;EAAA;EAAA;WAAVA,UAAU;IAAAwC,SAAVxC,UAAU;IAAAyC,YADG;EAAM","names":["Subject","ConferencePeer","RtcService","constructor","_signalR","_onIceCandidate","asObservable","createPeer","stream","outputStream","userSrcId","userDestId","peer","onCandidate","then","event","sendSignal","JSON","stringify","candidate","getVideoStream","navigator","mediaDevices","getUserMedia","video","width","max","height","audio","getSharingTrack","options","getDisplayMedia","getVideoTracks","getMediaStream","sampleRate","channelCount","echoCancellation","noiseSuppression","getAudioTracks","forEach","track","enabled","factory","providedIn"],"sourceRoot":"","sources":["D:\\Лабки\\Semantic\\FootballGuide\\VideoChat\\client\\src\\service\\rtc.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Subject } from \"rxjs\";\r\nimport { SignalRService } from \"./signalr.service\";\r\nimport { ConferencePeer } from \"src/model/conference-peer\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class RtcService {\r\n  private _onIceCandidate = new Subject<RTCPeerConnectionIceEvent>();\r\n  public onIceCandidate$ = this._onIceCandidate.asObservable();\r\n\r\n  constructor(private readonly _signalR: SignalRService) {}\r\n\r\n  public createPeer(stream: MediaStream, outputStream: MediaStream, userSrcId: string, userDestId: string): ConferencePeer {\r\n    let peer = new ConferencePeer(stream, outputStream);\r\n    peer.onCandidate().then((event) => {\r\n      this._signalR.sendSignal(userSrcId, userDestId, JSON.stringify({ \"ice\": event.candidate }));\r\n    });\r\n    return peer;\r\n  }\r\n\r\n  public async getVideoStream(): Promise<MediaStream> {\r\n    return await navigator.mediaDevices.getUserMedia({\r\n      video: {\r\n        width: { max: 800 },\r\n        height: { max: 600 }\r\n      },\r\n      audio: false\r\n    });\r\n  }\r\n\r\n  public async getSharingTrack(): Promise<MediaStreamTrack> {\r\n    let options = {\r\n      video: {\r\n        width: { max: 1270 },\r\n        height: { max: 720 }\r\n      }\r\n    };\r\n    debugger;\r\n    return (await navigator.mediaDevices.getDisplayMedia(options)).getVideoTracks()[0];\r\n  }\r\n\r\n  public async getMediaStream(): Promise<MediaStream> {\r\n    let stream = await navigator.mediaDevices.getUserMedia({\r\n      audio: {\r\n        sampleRate: 48000,\r\n        channelCount: 2,\r\n        echoCancellation: true,\r\n        noiseSuppression: true\r\n      },\r\n      video: false\r\n    });\r\n    stream.getAudioTracks().forEach((track) => {\r\n      track.enabled = false;\r\n    });\r\n    return stream;\r\n  }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}