{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport * as SimplePeer from \"simple-peer\";\nimport * as i0 from \"@angular/core\";\nexport let RtcService = /*#__PURE__*/(() => {\n  class RtcService {\n    constructor() {\n      this._onSignal = new Subject();\n      this.onSignal$ = this._onSignal.asObservable();\n      this._onStream = new Subject();\n      this.onStream = this._onStream.asObservable();\n    }\n    createPeer(stream, userId, initiator) {\n      const peer = new SimplePeer({\n        initiator,\n        stream\n      });\n      peer.on('signal', data => {\n        this._onSignal.next(JSON.stringify(data));\n      });\n      peer.on('stream', data => {\n        this._onStream.next({\n          id: userId,\n          data: data\n        });\n      });\n      return peer;\n    }\n    signalPeer(currentPeer, userId, signal, stream) {\n      const signalObject = JSON.parse(signal);\n      if (currentPeer) {\n        currentPeer.signal(signalObject);\n      } else {\n        currentPeer = this.createPeer(stream, userId, false);\n        currentPeer.signal(signalObject);\n      }\n    }\n    static #_ = this.ɵfac = function RtcService_Factory(t) {\n      return new (t || RtcService)();\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: RtcService,\n      factory: RtcService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n  return RtcService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}