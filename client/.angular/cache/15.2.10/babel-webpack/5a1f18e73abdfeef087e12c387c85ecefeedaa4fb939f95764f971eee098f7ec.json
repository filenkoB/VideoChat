{"ast":null,"code":"import _asyncToGenerator from \"D:/\\u041B\\u0430\\u0431\\u043A\\u0438/VideoChat/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nimport { Participant } from 'src/model/participant';\nimport { Subscription } from 'rxjs';\nimport { RtcParticipant } from 'src/model/rtc-participant';\nlet ConferenceMainComponent = class ConferenceMainComponent {\n  constructor(_signalR, _rtcService) {\n    this._signalR = _signalR;\n    this._rtcService = _rtcService;\n    this._subscriptions = new Subscription();\n    this.sharing = false;\n    this.localStream = new MediaStream();\n    this.participants = [];\n    this.peers = {};\n    this.userName = this._getNameFromCookies();\n    this._signalR.startConnection(this.userId, this.userName);\n    this._initEvents();\n  }\n  _getNameFromCookies() {\n    let matches = document.cookie.match(new RegExp(\"(?:^|; )\" + \"name\".replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + \"=([^;]*)\"));\n    return decodeURIComponent(matches[1]);\n  }\n  _initEvents() {\n    this._subscriptions.add(this._signalR.onConnected$.subscribe(this._onConnectedHandler.bind(this)));\n    this._subscriptions.add(this._signalR.getParticipants$.subscribe(this._getParticipantsHandler.bind(this)));\n    this._subscriptions.add(this._signalR.onNewConnection$.subscribe(this._onNewConnectionHandler.bind(this)));\n    this._subscriptions.add(this._signalR.onRemoveConnection$.subscribe(this._handleRemoveConnection.bind(this)));\n    this._subscriptions.add(this._signalR.onSignal$.subscribe(this._handleSignal.bind(this)));\n  }\n  _handleRemoveConnection(participant) {\n    let index = this.participants.findIndex(p => p.id === participant.id);\n    this.participants.splice(index, 1);\n    this.peers[participant.id].close();\n    delete this.peers[participant.id];\n  }\n  _handleSignal(signalEvent) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      let signal = JSON.parse(signalEvent.message);\n      let peer = _this.peers[signalEvent.userIdSrc];\n      if (signal.sdp) {\n        yield peer.setRemoteDescription(new RTCSessionDescription(signal.sdp));\n        if (signal.sdp.type == 'offer') {\n          let answer = yield peer.createAnswer();\n          yield peer.setLocalDescription(answer);\n          yield _this._signalR.sendSignal(signalEvent.userIdDest, signalEvent.userIdSrc, JSON.stringify({\n            \"sdp\": peer.localDescription\n          }));\n        }\n      }\n      if (signal.ice) {\n        yield peer.addIceCandidate(new RTCIceCandidate(signal.ice));\n      }\n    })();\n  }\n  _createOffer(peer, participant) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      const offer = yield peer.createOffer();\n      yield peer.setLocalDescription(offer);\n      yield _this2._signalR.sendSignal(_this2.userId, participant.id, JSON.stringify({\n        \"sdp\": peer.localDescription\n      }));\n    })();\n  }\n  _onNewConnectionHandler(participant) {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      console.log(\"On new connection\", participant);\n      let outputStream = new MediaStream();\n      _this3.participants.push(new RtcParticipant(outputStream, participant.id, participant.name));\n      let peer = _this3.peers[participant.id] = _this3._rtcService.createPeer(_this3.localStream, outputStream, _this3.userId, participant.id);\n      yield _this3._createOffer(peer, participant);\n      _this3._signalR.sendToggleEvent(\"ToggleMicrophone\", _this3.localParticipant.isMicroActive);\n      _this3._signalR.sendToggleEvent(\"ToggleVideo\", _this3.localParticipant.isVideoActive);\n    })();\n  }\n  _onConnectedHandler(userId) {\n    var _this4 = this;\n    return _asyncToGenerator(function* () {\n      _this4.userId = userId;\n      console.log(`Id: ${_this4.userId} Name: ${_this4.userName} - connected succesfully`);\n      (yield _this4._rtcService.getMediaStream()).getTracks().forEach(track => {\n        _this4.localStream.addTrack(track);\n      });\n      _this4.participants.push(new RtcParticipant(_this4.localStream, _this4.userId, _this4.userName));\n      yield _this4._signalR.getParticipants();\n      yield _this4._signalR.sendOnNewConnection(new Participant(_this4.userId, _this4.userName));\n    })();\n  }\n  _getParticipantsHandler(participants) {\n    var _this5 = this;\n    return _asyncToGenerator(function* () {\n      for (let p of participants) {\n        let outputStream = new MediaStream();\n        _this5.participants.push(new RtcParticipant(outputStream, p.id, p.name));\n        _this5.peers[p.id] = _this5._rtcService.createPeer(_this5.localStream, outputStream, _this5.userId, p.id);\n      }\n    })();\n  }\n  _onStartVideo() {\n    var _this6 = this;\n    return _asyncToGenerator(function* () {\n      let stream = yield _this6._rtcService.getVideoStream();\n      _this6.localParticipant.onStartVideo.next(stream);\n      for (let participant of _this6.participants.slice(1)) {\n        let peer = _this6.peers[participant.id];\n        const sender = peer.getSenders().find(e => e.track?.kind === 'video');\n        if (sender) {\n          _this6.localStream.getVideoTracks()[0].enabled = true;\n        } else {\n          peer.addTrack(_this6.localStream.getVideoTracks()[0], _this6.localStream);\n        }\n        yield _this6._createOffer(peer, participant);\n      }\n    })();\n  }\n  _onTurnOnMicro() {\n    var _this7 = this;\n    return _asyncToGenerator(function* () {\n      _this7.localParticipant.onStartMicro.next();\n      for (let participant of _this7.participants.slice(1)) {\n        let peer = _this7.peers[participant.id];\n        _this7.localStream.getAudioTracks()[0].enabled = true;\n        yield _this7._createOffer(peer, participant);\n      }\n    })();\n  }\n  _onTurnOffMicro() {\n    var _this8 = this;\n    return _asyncToGenerator(function* () {\n      _this8.localParticipant.onStopMicro.next();\n    })();\n  }\n  _onStopVideo() {\n    this.localParticipant.onStopVideo.next();\n  }\n  onSwitchVideo(isActive) {\n    isActive ? this._onStartVideo() : this._onStopVideo();\n  }\n  onSwitchMicro(isActive) {\n    isActive ? this._onTurnOnMicro() : this._onTurnOffMicro();\n  }\n  onSwitchSharing(isActive) {\n    var _this9 = this;\n    return _asyncToGenerator(function* () {\n      _this9.sharing = isActive;\n    })();\n  }\n  ngOnDestroy() {\n    this._subscriptions.unsubscribe();\n  }\n};\n__decorate([ViewChild(\"localParticipant\")], ConferenceMainComponent.prototype, \"localParticipant\", void 0);\nConferenceMainComponent = __decorate([Component({\n  selector: 'app-conference-main',\n  templateUrl: './conference-main.component.html',\n  styleUrls: ['./conference-main.component.scss']\n})], ConferenceMainComponent);\nexport { ConferenceMainComponent };","map":{"version":3,"mappings":"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","names":["Component","ViewChild","Participant","Subscription","RtcParticipant","ConferenceMainComponent","constructor","_signalR","_rtcService","MediaStream","userName","_getNameFromCookies","startConnection","userId","_initEvents","matches","document","cookie","match","RegExp","replace","decodeURIComponent","_subscriptions","add","onConnected$","subscribe","_onConnectedHandler","bind","getParticipants$","_getParticipantsHandler","onNewConnection$","_onNewConnectionHandler","onRemoveConnection$","_handleRemoveConnection","onSignal$","_handleSignal","participant","index","participants","findIndex","p","id","splice","peers","close","signalEvent","signal","JSON","parse","message","peer","userIdSrc","sdp","setRemoteDescription","RTCSessionDescription","type","answer","createAnswer","setLocalDescription","sendSignal","userIdDest","stringify","localDescription","ice","addIceCandidate","RTCIceCandidate","_createOffer","offer","createOffer","console","log","outputStream","push","name","createPeer","localStream","sendToggleEvent","localParticipant","isMicroActive","isVideoActive","getMediaStream","getTracks","forEach","track","addTrack","getParticipants","sendOnNewConnection","_onStartVideo","stream","getVideoStream","onStartVideo","next","slice","sender","getSenders","find","e","kind","getVideoTracks","enabled","_onTurnOnMicro","onStartMicro","getAudioTracks","_onTurnOffMicro","onStopMicro","_onStopVideo","onStopVideo","onSwitchVideo","isActive","onSwitchMicro","onSwitchSharing","sharing","ngOnDestroy","unsubscribe","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["D:\\Лабки\\VideoChat\\client\\src\\app\\conference-main\\conference-main.component.ts"],"sourcesContent":["import { Component, OnDestroy, ViewChild } from '@angular/core';\nimport { Participant } from 'src/model/participant';\nimport { SignalRService } from 'src/service/signalr.service';\nimport { Subscription } from 'rxjs';\nimport { RtcParticipant } from 'src/model/rtc-participant';\nimport { RtcService } from 'src/service/rtc.service';\nimport { SignalEvent } from 'src/model/signal-event';\nimport { ParticipantComponent } from '../participant/participant.component';\n\n@Component({\n  selector: 'app-conference-main',\n  templateUrl: './conference-main.component.html',\n  styleUrls: ['./conference-main.component.scss']\n})\nexport class ConferenceMainComponent implements OnDestroy {\n  @ViewChild(\"localParticipant\") public localParticipant! : ParticipantComponent;\n\n  private _subscriptions = new Subscription();\n  \n  public sharing = false;\n\n  public userId!: string;\n  public userName!: string;\n\n  public localStream = new MediaStream();\n\n  public participants: RtcParticipant[] = [];\n  public peers: any = {};\n\n  constructor(private readonly _signalR: SignalRService, private readonly _rtcService: RtcService) {\n    this.userName = this._getNameFromCookies();\n    this._signalR.startConnection(this.userId, this.userName);\n    this._initEvents();\n  }\n\n  private _getNameFromCookies(): string {\n    let matches = document.cookie.match(new RegExp(\n      \"(?:^|; )\" + \"name\".replace(/([\\.$?*|{}\\(\\)\\[\\]\\\\\\/\\+^])/g, '\\\\$1') + \"=([^;]*)\"\n    ))\n    return decodeURIComponent(matches![1]);\n  }\n\n  private _initEvents(): void {\n    this._subscriptions.add(this._signalR.onConnected$.subscribe(this._onConnectedHandler.bind(this)));\n    this._subscriptions.add(this._signalR.getParticipants$.subscribe(this._getParticipantsHandler.bind(this)));\n    this._subscriptions.add(this._signalR.onNewConnection$.subscribe(this._onNewConnectionHandler.bind(this)));\n    this._subscriptions.add(this._signalR.onRemoveConnection$.subscribe(this._handleRemoveConnection.bind(this)));\n    this._subscriptions.add(this._signalR.onSignal$.subscribe(this._handleSignal.bind(this)));\n  }\n\n  private _handleRemoveConnection(participant: Participant) {\n    let index = this.participants.findIndex(p => p.id === participant.id);\n    this.participants.splice(index, 1);\n    this.peers[participant.id].close();\n    delete this.peers[participant.id];\n  }\n\n  private async _handleSignal(signalEvent: SignalEvent) {\n    let signal = JSON.parse(signalEvent.message);\n    let peer = this.peers[signalEvent.userIdSrc] as RTCPeerConnection;\n    if(signal.sdp){     \n      await peer.setRemoteDescription(new RTCSessionDescription(signal.sdp));   \n      if(signal.sdp.type == 'offer') {     \n        let answer = await peer.createAnswer();\n        await peer.setLocalDescription(answer);\n        await this._signalR.sendSignal(signalEvent.userIdDest, signalEvent.userIdSrc, JSON.stringify({ \"sdp\": peer.localDescription }));\n      }\n    }\n    if(signal.ice) {\n      await peer.addIceCandidate(new RTCIceCandidate(signal.ice));\n    }\n  }\n\n  private async _createOffer(peer: RTCPeerConnection, participant: Participant) {\n    const offer = await peer.createOffer();\n    await peer.setLocalDescription(offer);\n    await this._signalR.sendSignal(this.userId, participant.id, JSON.stringify({ \"sdp\": peer.localDescription! }));\n  }\n\n  private async _onNewConnectionHandler(participant: Participant) {\n    console.log(\"On new connection\", participant);\n    let outputStream = new MediaStream();\n    this.participants.push(new RtcParticipant(outputStream, participant.id, participant.name));\n    let peer = this.peers[participant.id] = this._rtcService.createPeer(this.localStream, outputStream, this.userId, participant.id);\n    await this._createOffer(peer, participant);\n    this._signalR.sendToggleEvent(\"ToggleMicrophone\", this.localParticipant.isMicroActive);\n    this._signalR.sendToggleEvent(\"ToggleVideo\", this.localParticipant.isVideoActive);\n  }\n\n  private async _onConnectedHandler(userId: string) {\n    this.userId = userId;\n    console.log(`Id: ${this.userId} Name: ${this.userName} - connected succesfully`);\n    (await this._rtcService.getMediaStream()).getTracks().forEach(track => {\n      this.localStream.addTrack(track);\n    });\n    this.participants.push(new RtcParticipant(this.localStream, this.userId, this.userName));\n    await this._signalR.getParticipants();\n    await this._signalR.sendOnNewConnection(new Participant(this.userId, this.userName));\n  }\n\n  private async _getParticipantsHandler(participants: Participant[]) {\n    for (let p of participants) {\n      let outputStream = new MediaStream();\n      this.participants.push(new RtcParticipant(outputStream, p.id, p.name));\n      this.peers[p.id] = this._rtcService.createPeer(this.localStream, outputStream, this.userId, p.id);\n    }\n  }\n  \n  private async _onStartVideo() {\n    let stream = await this._rtcService.getVideoStream();\n    this.localParticipant.onStartVideo.next(stream);\n    for (let participant of this.participants.slice(1)) {\n      let peer = this.peers[participant.id] as RTCPeerConnection;\n      const sender = peer.getSenders().find(e => e.track?.kind === 'video');\n      if (sender) {\n        this.localStream.getVideoTracks()[0].enabled = true;\n      } else {\n        peer.addTrack(this.localStream.getVideoTracks()[0], this.localStream);\n      }\n      await this._createOffer(peer, participant);\n    }\n  }\n\n  private async _onTurnOnMicro() {\n    this.localParticipant.onStartMicro.next();\n    for (let participant of this.participants.slice(1)) {\n      let peer = this.peers[participant.id] as RTCPeerConnection;\n      this.localStream.getAudioTracks()[0].enabled = true;\n      await this._createOffer(peer, participant);\n    }\n  }\n\n  private async _onTurnOffMicro() {\n    this.localParticipant.onStopMicro.next();\n  }\n\n  private _onStopVideo() {\n    this.localParticipant.onStopVideo.next();\n  }\n\n  public onSwitchVideo(isActive: boolean) {\n    isActive ? this._onStartVideo() : this._onStopVideo();\n  }\n\n  public onSwitchMicro(isActive: boolean) {\n    isActive ? this._onTurnOnMicro() : this._onTurnOffMicro();\n  }\n\n  public async onSwitchSharing(isActive: boolean) {\n    this.sharing = isActive;\n  }\n\n  public ngOnDestroy(): void {\n    this._subscriptions.unsubscribe();  \n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}