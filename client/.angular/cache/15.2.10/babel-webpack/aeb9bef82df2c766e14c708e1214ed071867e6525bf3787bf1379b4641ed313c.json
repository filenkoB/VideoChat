{"ast":null,"code":"import _asyncToGenerator from \"D:/\\u041B\\u0430\\u0431\\u043A\\u0438/VideoChat/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { SignalR } from \"./signalr.utils\";\nimport * as i0 from \"@angular/core\";\nexport class MediaService {\n  constructor() {\n    this._videoSettings = {\n      width: {\n        ideal: 1366\n      },\n      height: {\n        ideal: 768\n      }\n    };\n    this._audioFrequency = 440;\n    this._hubConnection = SignalR.connection;\n  }\n  _convertBlobToArray(data) {\n    return new Promise((resolve, reject) => {\n      let reader = new FileReader();\n      reader.onloadend = function () {\n        if (reader.result) {\n          let byteArray = new Uint8Array(reader.result);\n          resolve(byteArray);\n        }\n      };\n      reader.readAsArrayBuffer(data);\n    });\n  }\n  getVideoStream() {\n    return navigator.mediaDevices.getUserMedia({\n      video: this._videoSettings\n    });\n  }\n  getAudioStream() {\n    return navigator.mediaDevices.getUserMedia({\n      audio: true\n    });\n  }\n  getVideoTrack() {\n    return navigator.mediaDevices.getUserMedia({\n      video: this._videoSettings\n    }).then(stream => stream.getVideoTracks()[0]);\n  }\n  static getVideoTrackId(stream) {\n    return stream.getVideoTracks()[0].id;\n  }\n  static getAudioTrackId(stream) {\n    return stream.getAudioTracks()[0].id;\n  }\n  getAudioTrack() {\n    const audioContext = new window.AudioContext();\n    const oscillator = audioContext.createOscillator();\n    oscillator.frequency.value = this._audioFrequency;\n    oscillator.connect(audioContext.destination);\n    return audioContext.createMediaStreamDestination().stream.getAudioTracks()[0];\n  }\n  sendVideoStreamData(data) {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      _this._hubConnection.invoke(\"SendVideoData\", data).catch(error => console.log(error));\n    })();\n  }\n  static #_ = this.ɵfac = function MediaService_Factory(t) {\n    return new (t || MediaService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: MediaService,\n    factory: MediaService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"mappings":";AAEA,SAASA,OAAO,QAAQ,iBAAiB;;AAGzC,OAAM,MAAOC,YAAY;EAQrBC;IAPiB,mBAAc,GAAG;MAC9BC,KAAK,EAAE;QAAEC,KAAK,EAAE;MAAI,CAAE;MACtBC,MAAM,EAAE;QAAED,KAAK,EAAE;MAAG;KACvB;IACgB,oBAAe,GAAG,GAAG;IAIlC,IAAI,CAACE,cAAc,GAAGN,OAAO,CAACO,UAAU;EAC5C;EAEQC,mBAAmB,CAACC,IAAU;IAClC,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACnC,IAAIC,MAAM,GAAG,IAAIC,UAAU,EAAE;MAC7BD,MAAM,CAACE,SAAS,GAAG;QACf,IAAIF,MAAM,CAACG,MAAM,EAAE;UACf,IAAIC,SAAS,GAAG,IAAIC,UAAU,CAACL,MAAM,CAACG,MAAqB,CAAC;UAC5DL,OAAO,CAACM,SAAS,CAAC;;MAE1B,CAAC;MACDJ,MAAM,CAACM,iBAAiB,CAACV,IAAI,CAAC;IAClC,CAAC,CAAC;EACN;EAEOW,cAAc;IACjB,OAAOC,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MACvCC,KAAK,EAAE,IAAI,CAACC;KACf,CAAC;EACN;EAEOC,cAAc;IACjB,OAAOL,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MACvCI,KAAK,EAAE;KACV,CAAC;EACN;EAEOC,aAAa;IAChB,OAAOP,SAAS,CAACC,YAAY,CAACC,YAAY,CAAC;MACvCC,KAAK,EAAE,IAAI,CAACC;KACf,CAAC,CAACI,IAAI,CAAEC,MAAmB,IAAKA,MAAM,CAACC,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC;EAChE;EAEO,OAAOC,eAAe,CAACF,MAAmB;IAC7C,OAAOA,MAAM,CAACC,cAAc,EAAE,CAAC,CAAC,CAAC,CAACE,EAAE;EACxC;EAEO,OAAOC,eAAe,CAACJ,MAAmB;IAC7C,OAAOA,MAAM,CAACK,cAAc,EAAE,CAAC,CAAC,CAAC,CAACF,EAAE;EACxC;EAEOG,aAAa;IAChB,MAAMC,YAAY,GAAG,IAAIC,MAAM,CAACC,YAAY,EAAE;IAE9C,MAAMC,UAAU,GAAGH,YAAY,CAACI,gBAAgB,EAAE;IAClDD,UAAU,CAACE,SAAS,CAACC,KAAK,GAAG,IAAI,CAACC,eAAe;IACjDJ,UAAU,CAACK,OAAO,CAACR,YAAY,CAACS,WAAW,CAAC;IAE5C,OAAOT,YAAY,CAACU,4BAA4B,EAAE,CAACjB,MAAM,CAACK,cAAc,EAAE,CAAC,CAAC,CAAC;EACjF;EAEaa,mBAAmB,CAACvC,IAAY;IAAA;IAAA;MACzC,KAAI,CAACH,cAAc,CAAC2C,MAAM,CAAC,eAAe,EAAExC,IAAI,CAAC,CAC5CyC,KAAK,CAACC,KAAK,IAAIC,OAAO,CAACC,GAAG,CAACF,KAAK,CAAC,CAAC;IAAC;EAC5C;EAAC;qBAhEQlD,YAAY;EAAA;EAAA;WAAZA,YAAY;IAAAqD,SAAZrD,YAAY;IAAAsD,YADC;EAAM","names":["SignalR","MediaService","constructor","width","ideal","height","_hubConnection","connection","_convertBlobToArray","data","Promise","resolve","reject","reader","FileReader","onloadend","result","byteArray","Uint8Array","readAsArrayBuffer","getVideoStream","navigator","mediaDevices","getUserMedia","video","_videoSettings","getAudioStream","audio","getVideoTrack","then","stream","getVideoTracks","getVideoTrackId","id","getAudioTrackId","getAudioTracks","getAudioTrack","audioContext","window","AudioContext","oscillator","createOscillator","frequency","value","_audioFrequency","connect","destination","createMediaStreamDestination","sendVideoStreamData","invoke","catch","error","console","log","factory","providedIn"],"sourceRoot":"","sources":["D:\\Лабки\\VideoChat\\client\\src\\service\\media.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { HubConnection, HubConnectionBuilder } from \"@microsoft/signalr\";\r\nimport { SignalR } from \"./signalr.utils\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class MediaService {\r\n    private readonly _videoSettings = {\r\n        width: { ideal: 1366 },\r\n        height: { ideal: 768 }\r\n    };\r\n    private readonly _audioFrequency = 440;\r\n    private readonly _hubConnection: HubConnection;\r\n\r\n    constructor() {\r\n        this._hubConnection = SignalR.connection;\r\n    }\r\n\r\n    private _convertBlobToArray(data: Blob): Promise<Uint8Array> {\r\n        return new Promise((resolve, reject) => {\r\n            let reader = new FileReader();\r\n            reader.onloadend = function () {\r\n                if (reader.result) {\r\n                    let byteArray = new Uint8Array(reader.result as ArrayBuffer);\r\n                    resolve(byteArray);\r\n                }\r\n            };\r\n            reader.readAsArrayBuffer(data);\r\n        });\r\n    }\r\n\r\n    public getVideoStream() : Promise<MediaStream> {\r\n        return navigator.mediaDevices.getUserMedia({\r\n            video: this._videoSettings\r\n        });\r\n    }\r\n\r\n    public getAudioStream() : Promise<MediaStream> {\r\n        return navigator.mediaDevices.getUserMedia({\r\n            audio: true\r\n        });\r\n    }\r\n\r\n    public getVideoTrack() : Promise<MediaStreamTrack> {\r\n        return navigator.mediaDevices.getUserMedia({\r\n            video: this._videoSettings\r\n        }).then((stream: MediaStream) => stream.getVideoTracks()[0]);\r\n    }\r\n\r\n    public static getVideoTrackId(stream: MediaStream): string {\r\n        return stream.getVideoTracks()[0].id;\r\n    }\r\n\r\n    public static getAudioTrackId(stream: MediaStream): string {\r\n        return stream.getAudioTracks()[0].id;\r\n    }\r\n\r\n    public getAudioTrack() : MediaStreamTrack {\r\n        const audioContext = new window.AudioContext();\r\n\r\n        const oscillator = audioContext.createOscillator();\r\n        oscillator.frequency.value = this._audioFrequency;\r\n        oscillator.connect(audioContext.destination);\r\n\r\n        return audioContext.createMediaStreamDestination().stream.getAudioTracks()[0];\r\n    }\r\n\r\n    public async sendVideoStreamData(data: string) {\r\n        this._hubConnection.invoke(\"SendVideoData\", data)\r\n            .catch(error => console.log(error));\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}