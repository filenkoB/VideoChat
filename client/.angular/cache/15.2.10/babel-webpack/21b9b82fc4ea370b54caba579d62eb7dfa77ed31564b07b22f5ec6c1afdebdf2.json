{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class RtcService {\n  _initPeerEvents(peer, onSignal, onStream) {\n    peer.on('signal', data => {\n      this.onSignal.next(JSON.stringify(data));\n    });\n    peer.on('stream', stream => {\n      this.onStream.next(stream);\n    });\n  }\n  createPeer(stream, userId, initiator) {\n    const peer = new window[\"SimplePeer\"]({\n      initiator,\n      stream\n    });\n    this._initPeerEvents(peer);\n    return peer;\n  }\n  createRemotePeer(initiator, onSignal, onStream) {\n    const peer = new window[\"SimplePeer\"]({\n      initiator,\n      trickle: false\n    });\n    this._initPeerEvents(peer);\n    return peer;\n  }\n  signalPeer(currentPeer, userId, signal, stream) {\n    const signalObject = JSON.parse(signal);\n    if (currentPeer) {\n      currentPeer.signal(signalObject);\n    } else {\n      currentPeer = this.createPeer(stream, userId, false);\n      currentPeer.signal(signalObject);\n    }\n  }\n  static #_ = this.ɵfac = function RtcService_Factory(t) {\n    return new (t || RtcService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: RtcService,\n    factory: RtcService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"mappings":";AAKA,OAAM,MAAOA,UAAU;EACXC,eAAe,CAACC,IAAyB,EAAEC,QAAyB,EAAEC,QAA8B;IACxGF,IAAI,CAACG,EAAE,CAAC,QAAQ,EAAGC,IAA2B,IAAI;MAC9C,IAAI,CAACH,QAAQ,CAACI,IAAI,CAACC,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,CAAC;IAC5C,CAAC,CAAC;IAEFJ,IAAI,CAACG,EAAE,CAAC,QAAQ,EAAGK,MAAmB,IAAI;MACtC,IAAI,CAACN,QAAQ,CAACG,IAAI,CAACG,MAAM,CAAC;IAC9B,CAAC,CAAC;EACN;EAEOC,UAAU,CAACD,MAAwB,EAAEE,MAAc,EAAEC,SAAkB;IAC1E,MAAMX,IAAI,GAAG,IAAKY,MAAc,CAAC,YAAY,CAAC,CAAC;MAAED,SAAS;MAAEH;IAAM,CAAE,CAAC;IACrE,IAAI,CAACT,eAAe,CAACC,IAAI,CAAC;IAC1B,OAAOA,IAAI;EACf;EAEOa,gBAAgB,CAACF,SAAkB,EAAEV,QAAyB,EAAEC,QAA8B;IACjG,MAAMF,IAAI,GAAG,IAAKY,MAAc,CAAC,YAAY,CAAC,CAAC;MAAED,SAAS;MAAEG,OAAO,EAAE;IAAK,CAAE,CAAC;IAC7E,IAAI,CAACf,eAAe,CAACC,IAAI,CAAC;IAC1B,OAAOA,IAAI;EACf;EAEOe,UAAU,CAACC,WAAgC,EAAEN,MAAc,EAAEO,MAAc,EAAET,MAAW;IAC3F,MAAMU,YAAY,GAAGZ,IAAI,CAACa,KAAK,CAACF,MAAM,CAAC;IACvC,IAAID,WAAW,EAAE;MACbA,WAAW,CAACC,MAAM,CAACC,YAAY,CAAC;KACnC,MAAM;MACHF,WAAW,GAAG,IAAI,CAACP,UAAU,CAACD,MAAM,EAAEE,MAAM,EAAE,KAAK,CAAC;MACpDM,WAAW,CAACC,MAAM,CAACC,YAAY,CAAC;;EAExC;EAAC;qBA/BQpB,UAAU;EAAA;EAAA;WAAVA,UAAU;IAAAsB,SAAVtB,UAAU;IAAAuB,YADG;EAAM","names":["RtcService","_initPeerEvents","peer","onSignal","onStream","on","data","next","JSON","stringify","stream","createPeer","userId","initiator","window","createRemotePeer","trickle","signalPeer","currentPeer","signal","signalObject","parse","factory","providedIn"],"sourceRoot":"","sources":["D:\\Лабки\\VideoChat\\client\\src\\service\\rtc.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Subject } from \"rxjs\";\r\nimport * as SimplePeer from \"simple-peer\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class RtcService {\r\n    private _initPeerEvents(peer: SimplePeer.Instance, onSignal: Subject<string>, onStream: Subject<MediaStream>) {\r\n        peer.on('signal', (data: SimplePeer.SignalData) => {\r\n            this.onSignal.next(JSON.stringify(data));\r\n        });\r\n    \r\n        peer.on('stream', (stream: MediaStream) => {\r\n            this.onStream.next(stream);\r\n        });\r\n    }\r\n\r\n    public createPeer(stream: MediaStream|null, userId: string, initiator: boolean): SimplePeer.Instance {\r\n        const peer = new (window as any)[\"SimplePeer\"]({ initiator, stream });\r\n        this._initPeerEvents(peer);\r\n        return peer;\r\n    }\r\n\r\n    public createRemotePeer(initiator: boolean, onSignal: Subject<string>, onStream: Subject<MediaStream>): SimplePeer.Instance {\r\n        const peer = new (window as any)[\"SimplePeer\"]({ initiator, trickle: false });\r\n        this._initPeerEvents(peer);\r\n        return peer;\r\n    }\r\n\r\n    public signalPeer(currentPeer: SimplePeer.Instance, userId: string, signal: string, stream: any) {\r\n        const signalObject = JSON.parse(signal);\r\n        if (currentPeer) {\r\n            currentPeer.signal(signalObject);\r\n        } else {\r\n            currentPeer = this.createPeer(stream, userId, false);\r\n            currentPeer.signal(signalObject);\r\n        }\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}