{"ast":null,"code":"import { Subject } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nexport class ConferenceService {\n  constructor() {\n    this._getParticipants = new Subject();\n    this.getParticipants$ = this._getParticipants.asObservable();\n    this._toggleMicrophone = new Subject();\n    this.toggleMicrophone$ = this._toggleMicrophone.asObservable();\n    this._newConnection = new Subject();\n    this.newConnection$ = this._newConnection.asObservable();\n    this._removeConnection = new Subject();\n    this.removeConnection$ = this._removeConnection.asObservable();\n    this.connection = new HubConnectionBuilder().withUrl(constants.serverUrl + \"/conference\").build();\n  }\n  getParticipants() {\n    this._getParticipants.next();\n  }\n  static connect() {\n    return from(SignalR.connection.start());\n  }\n  static startConnection(userId, userName) {\n    SignalR.connection.on(\"Connected\", () => {\n      console.log(`Id: ${userId} Name: ${userName} - connected succesfully`);\n      SignalR.connection.off(\"Connected\");\n    });\n    return from(SignalR.connection.send(\"Connect\", {\n      id: userId,\n      name: userName\n    }));\n  }\n  static #_ = this.ɵfac = function ConferenceService_Factory(t) {\n    return new (t || ConferenceService)();\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ConferenceService,\n    factory: ConferenceService.ɵfac,\n    providedIn: \"root\"\n  });\n}","map":{"version":3,"mappings":"AAEA,SAASA,OAAO,QAAQ,MAAM;;AAG9B,OAAM,MAAOC,iBAAiB;EAD9BC;IAIY,qBAAgB,GAAG,IAAIF,OAAO,EAAiB;IAChD,qBAAgB,GAAG,IAAI,CAACG,gBAAgB,CAACC,YAAY,EAAE;IAEtD,sBAAiB,GAAG,IAAIJ,OAAO,EAAW;IAC3C,sBAAiB,GAAG,IAAI,CAACK,iBAAiB,CAACD,YAAY,EAAE;IAExD,mBAAc,GAAG,IAAIJ,OAAO,EAAe;IAC5C,mBAAc,GAAG,IAAI,CAACM,cAAc,CAACF,YAAY,EAAE;IAElD,sBAAiB,GAAG,IAAIJ,OAAO,EAAe;IAC/C,sBAAiB,GAAG,IAAI,CAACO,iBAAiB,CAACH,YAAY,EAAE;IAMzD,eAAU,GAAkB,IAAII,oBAAoB,EAAE,CACxDC,OAAO,CAACC,SAAS,CAACC,SAAS,GAAG,aAAa,CAAC,CAACC,KAAK,EAAE;;EALlDC,eAAe;IAClB,IAAI,CAACV,gBAAgB,CAACW,IAAI,EAAE;EAChC;EAKO,OAAOC,OAAO;IACjB,OAAOC,IAAI,CAACC,OAAO,CAACC,UAAU,CAACC,KAAK,EAAE,CAAC;EAC3C;EAEO,OAAOC,eAAe,CAACC,MAAc,EAAEC,QAAgB;IAC1DL,OAAO,CAACC,UAAU,CAACK,EAAE,CAAC,WAAW,EAAE,MAAK;MACpCC,OAAO,CAACC,GAAG,CAAC,OAAOJ,MAAM,UAAUC,QAAQ,0BAA0B,CAAC;MACtEL,OAAO,CAACC,UAAU,CAACQ,GAAG,CAAC,WAAW,CAAC;IACvC,CAAC,CAAC;IACF,OAAOV,IAAI,CAACC,OAAO,CAACC,UAAU,CAACS,IAAI,CAAC,SAAS,EAAE;MAAEC,EAAE,EAAEP,MAAM;MAAEQ,IAAI,EAAEP;IAAQ,CAAE,CAAC,CAAC;EACnF;EAAC;qBAhCQrB,iBAAiB;EAAA;EAAA;WAAjBA,iBAAiB;IAAA6B,SAAjB7B,iBAAiB;IAAA8B,YADJ;EAAM","names":["Subject","ConferenceService","constructor","_getParticipants","asObservable","_toggleMicrophone","_newConnection","_removeConnection","HubConnectionBuilder","withUrl","constants","serverUrl","build","getParticipants","next","connect","from","SignalR","connection","start","startConnection","userId","userName","on","console","log","off","send","id","name","factory","providedIn"],"sourceRoot":"","sources":["D:\\Лабки\\VideoChat\\client\\src\\service\\conference.service.ts"],"sourcesContent":["import { Injectable } from \"@angular/core\";\r\nimport { Participant } from \"src/model/participant\";\r\nimport { Subject } from \"rxjs\";\r\n\r\n@Injectable({ providedIn: \"root\" })\r\nexport class ConferenceService {\r\n    private _connection?: HubConnection;\r\n    \r\n    private _getParticipants = new Subject<Participant[]>()\r\n    public getParticipants$ = this._getParticipants.asObservable();\r\n\r\n    private _toggleMicrophone = new Subject<boolean>();\r\n    public toggleMicrophone$ = this._toggleMicrophone.asObservable();\r\n\r\n    private _newConnection = new Subject<Participant>();\r\n    public newConnection$ = this._newConnection.asObservable();\r\n\r\n    private _removeConnection = new Subject<Participant>();\r\n    public removeConnection$ = this._removeConnection.asObservable();\r\n\r\n    public getParticipants() : void {\r\n        this._getParticipants.next()\r\n    }\r\n\r\n    public connection: HubConnection = new HubConnectionBuilder()\r\n        .withUrl(constants.serverUrl + \"/conference\").build();\r\n        \r\n    public static connect() : Observable<void> {\r\n        return from(SignalR.connection.start());\r\n    }\r\n\r\n    public static startConnection(userId: string, userName: string) : Observable<void> {\r\n        SignalR.connection.on(\"Connected\", () => {\r\n            console.log(`Id: ${userId} Name: ${userName} - connected succesfully`);\r\n            SignalR.connection.off(\"Connected\");\r\n        });\r\n        return from(SignalR.connection.send(\"Connect\", { id: userId, name: userName }));\r\n    }\r\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}